"use strict";(self.webpackChunkxceed_libs_doc=self.webpackChunkxceed_libs_doc||[]).push([[110],{99970:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>c});var r=i(74848),s=i(28453);const t={title:"FTP Features"},o="Features of Xceed FTP for .NET",l={id:"intro",title:"FTP Features",description:".NET technology",source:"@site/ftp/intro.md",sourceDirName:".",slug:"/intro",permalink:"/xceed-libs-doc/ftp/intro",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"FTP Features"},sidebar:"sidebarftp",next:{title:"Features of Xceed SFTP for .NET",permalink:"/xceed-libs-doc/ftp/sftp_intro"}},a={},c=[{value:".NET technology",id:"net-technology",level:2},{value:"FTP protocol features",id:"ftp-protocol-features",level:2},{value:"Major features",id:"major-features",level:2},{value:"Component interactivity / Events",id:"component-interactivity--events",level:2},{value:"Other features",id:"other-features",level:2}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"features-of-xceed-ftp-for-net",children:"Features of Xceed FTP for .NET"})}),"\n",(0,r.jsx)(n.h2,{id:"net-technology",children:".NET technology"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"100% managed code written in C#, source code available through a Blueprint subscription."}),"\n",(0,r.jsx)(n.li,{children:"Object-oriented design created specifically for versions 4 and 2.0 to 3.5 of the .NET Framework."}),"\n",(0,r.jsx)(n.li,{children:"VB.NET and C# sample applications included."}),"\n",(0,r.jsx)(n.li,{children:"All error handling works through .NET exception classes."}),"\n",(0,r.jsx)(n.li,{children:"Objects don\u2019t need to be explicitly disposed of."}),"\n",(0,r.jsx)(n.li,{children:"CLS compliant (Common Language Specification)."}),"\n",(0,r.jsx)(n.li,{children:"Does not use unsafe blocks for minimal permission requirements."}),"\n",(0,r.jsx)(n.li,{children:"Documentation fully integrated into Visual Studio.NET."}),"\n",(0,r.jsxs)(n.li,{children:["Built using ",(0,r.jsx)(n.code,{children:"System.Net.Sockets"})," namespace."]}),"\n",(0,r.jsx)(n.li,{children:"The .NET 4 build is compiled using the Client Profile."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"ftp-protocol-features",children:"FTP protocol features"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"RFC 959, 1123, and 1579 compliant."}),"\n",(0,r.jsxs)(n.li,{children:['Support for "Knowledge of Extra Capabilities", also known as the FEAT command. ',(0,r.jsx)(n.em,{children:"(New in version 3.5)"})]}),"\n",(0,r.jsxs)(n.li,{children:["Support for MODE Z data transfer. ",(0,r.jsx)(n.em,{children:"(New in version 3.5)"})]}),"\n",(0,r.jsx)(n.li,{children:"Enables connections to FTP servers through HTTP proxy servers."}),"\n",(0,r.jsxs)(n.li,{children:["SSL 3.0, 3.1, and TLS 1.2 support for both FtpClient and FileSystem. ",(0,r.jsx)(n.em,{children:"(Updated in version 6.0)"})]}),"\n",(0,r.jsxs)(n.li,{children:["Partial RFC 2228 and 2389 compliance. ",(0,r.jsx)(n.em,{children:"(New in version 3.5)"})]}),"\n",(0,r.jsx)(n.li,{children:"Solid, built-in support for various server types including Unix, VMS, AS/400, and DOS."}),"\n",(0,r.jsx)(n.li,{children:"Supports all major FTP operations and allows sending of custom commands."}),"\n",(0,r.jsx)(n.li,{children:"Supports FTP passive mode for firewall and proxy server resilience."}),"\n",(0,r.jsxs)(n.li,{children:["CCC (clear command channel) command and UseRemoteAddress property make connecting to a server residing behind a firewall easy. ",(0,r.jsx)(n.em,{children:"(New in version 4.0)"})]}),"\n",(0,r.jsx)(n.li,{children:"Supports the File eXchange Protocol (FXP)."}),"\n",(0,r.jsx)(n.li,{children:"Supports listings for machine processing (MLST and MLSD)."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"major-features",children:"Major features"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["File and folder synchronization on ",(0,r.jsx)(n.code,{children:"FileSystemItem"})," and ",(0,r.jsx)(n.code,{children:"FileSystemItem"}),"-derived objects, such as ",(0,r.jsx)(n.code,{children:"AbstractFile"})," or ",(0,r.jsx)(n.code,{children:"AbstractFolder"})," objects and their derivatives."]}),"\n",(0,r.jsx)(n.li,{children:"Full Windows Vista support."}),"\n",(0,r.jsx)(n.li,{children:'Three new "Quick" classes provide static methods that let you perform FTP, Tar, and GZip operations with a single line of code: QuickFtp, QuickTar, and QuickGZip. These new classes accompany and complement the currently available QuickZip and QuickCompression classes.'}),"\n",(0,r.jsx)(n.li,{children:"Xceed FTP for .NET Compact Framework."}),"\n",(0,r.jsx)(n.li,{children:"Provides a more flexible and object-oriented way of working with files and folders on the FTP server just as easily as if they were local filesystem elements. Based on Xceed\u2019s own powerful FileSystem classes."}),"\n",(0,r.jsx)(n.li,{children:"Send and receive files, folders, or entire directory structures quickly and easily."}),"\n",(0,r.jsx)(n.li,{children:"Send and receive files to or from disk or from any kind of stream, including memory streams."}),"\n",(0,r.jsx)(n.li,{children:"Replicate a local directory structure with a remote directory structure on an FTP server and vice-versa."}),"\n",(0,r.jsx)(n.li,{children:"Operations can be aborted at any time."}),"\n",(0,r.jsx)(n.li,{children:"Support for asynchronous FTP operations."}),"\n",(0,r.jsx)(n.li,{children:"Provides a rich set of events to keep your application notified of all FTP activity."}),"\n",(0,r.jsx)(n.li,{children:"Allows you to verify at any time the exact state of the component, including whether it is connected or not, busy or not, sending, receiving, deleting, etc."}),"\n",(0,r.jsx)(n.li,{children:"Obtain a detailed listing of files on the FTP server via a collection object or by events."}),"\n",(0,r.jsx)(n.li,{children:"Rename and delete files on the FTP server."}),"\n",(0,r.jsx)(n.li,{children:"Resume file transfers from any byte offset."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"component-interactivity--events",children:"Component interactivity / Events"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Provides status report events on a file-by-file basis as well as on the entire operation being performed."}),"\n",(0,r.jsx)(n.li,{children:"Status reports include various completion percentages, byte counts, file counts, bytes per second, bytes skipped, number of files skipped, and more. Displaying a progress bar could not be easier!"}),"\n",(0,r.jsx)(n.li,{children:"Events are triggered for all major operations such as whenever a file is being sent, received, listed, etc."}),"\n",(0,r.jsx)(n.li,{children:"When sending multiple files and an error occurs, allows you to retry the file, skip it and continue, or abort the entire operation."}),"\n",(0,r.jsx)(n.li,{children:"Provides complete file information for the current file being processed."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"other-features",children:"Other features"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Create filters so you can send or receive only files that fit specific criteria such as file size or date."}),"\n",(0,r.jsx)(n.li,{children:"Allows you to rename or change filenames and paths before sending."}),"\n",(0,r.jsx)(n.li,{children:"Automatic logging to memory or to disk."}),"\n",(0,r.jsx)(n.li,{children:"Use the automatic directory listing parser or create your own custom parser for unknown listing formats and FTP server types. You can do this in two ways - through inheritance or by handling an event."}),"\n",(0,r.jsx)(n.li,{children:"Set a timeout limit on all operations and have an exception triggered if it is exceeded."}),"\n",(0,r.jsx)(n.li,{children:"Send a file to an FTP server and have the server give it a unique filename."}),"\n",(0,r.jsx)(n.li,{children:"Can send files as ASCII or Binary."}),"\n",(0,r.jsx)(n.li,{children:"Triggers an event if the connection to the FTP server is lost."}),"\n",(0,r.jsx)(n.li,{children:"Allows you to change the user that is currently logged in without disconnecting."}),"\n",(0,r.jsx)(n.li,{children:"Built-in tweaks for working with non-standard FTP server types including settable FTP server folder separator character, storage pre-allocation, and TYPE command sending."}),"\n",(0,r.jsx)(n.li,{children:"Specify an FTP server by IP address or host name."}),"\n",(0,r.jsx)(n.li,{children:"Specify files to send or receive using wildcards."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var r=i(96540);const s={},t=r.createContext(s);function o(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);