"use strict";(self.webpackChunkxceed_libs_doc=self.webpackChunkxceed_libs_doc||[]).push([[9312],{52388:(e,o,s)=>{s.r(o),s.d(o,{assets:()=>l,contentTitle:()=>i,default:()=>w,frontMatter:()=>n,metadata:()=>c,toc:()=>d});var r=s(74848),t=s(28453);const n={},i="Customize Rows",c={id:"code-snippets/row/customize-rows",title:"Customize Rows",description:"This example demonstrates how to customize rows when using the API from the Xceed Workbooks for .NET.",source:"@site/workbooks/code-snippets/row/customize-rows.md",sourceDirName:"code-snippets/row",slug:"/code-snippets/row/customize-rows",permalink:"/xceed-libs-doc/workbooks/code-snippets/row/customize-rows",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebarsworkbooks",previous:{title:"Row Cell access",permalink:"/xceed-libs-doc/workbooks/code-snippets/row/row-cell-access"},next:{title:"Hide & Unhide rows",permalink:"/xceed-libs-doc/workbooks/code-snippets/row/hide-unhide-rows"}},l={},d=[];function a(e){const o={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(o.header,{children:(0,r.jsx)(o.h1,{id:"customize-rows",children:"Customize Rows"})}),"\n",(0,r.jsx)(o.p,{children:"This example demonstrates how to customize rows when using the API from the Xceed Workbooks for .NET."}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-csharp",children:'    public static void CustomizeRows()\r\n    {\r\n      using( var workbook = Workbook.Create( "CustomizeRows.xlsx" ) )\r\n      {\r\n        // Get the first worksheet. A workbook contains at least 1 worksheet.\r\n        var worksheet = workbook.Worksheets[ 0 ];    \r\n\r\n        // Add a title.\r\n        worksheet.Cells[ "B1" ].Value = "Customize Rows";\r\n        worksheet.Cells[ "B1" ].Style.Font = new Font() { Bold = true, Size = 15.5d };\r\n\r\n        // Fill Cells and row Heights.\r\n        worksheet.Rows[ 5 ].Cells[ 3 ].Value = "This row has a height of 30";\r\n        worksheet.Rows[ 5 ].Height = 30d;\r\n\r\n        worksheet.Cells[ "B11" ].Value = "This row has a height of 45";\r\n        worksheet.Rows[ 10 ].Height = 45d;\r\n\r\n        worksheet.Cells[ "C15" ].Value = "This row has an auto height";\r\n        worksheet.Cells[ "C15" ].Style.Font.Size = 48d;\r\n        worksheet.Rows[ 14 ].AutoFit();\r\n\r\n        // Save workbook to disk.\r\n        workbook.Save();\r\n        Console.WriteLine( "\\tCreated: CustomizeRows.xlsx\\n" );\r\n      }\r\n    }\n'})})]})}function w(e={}){const{wrapper:o}={...(0,t.R)(),...e.components};return o?(0,r.jsx)(o,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},28453:(e,o,s)=>{s.d(o,{R:()=>i,x:()=>c});var r=s(96540);const t={},n=r.createContext(t);function i(e){const o=r.useContext(n);return r.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function c(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(n.Provider,{value:o},e.children)}}}]);