"use strict";(self.webpackChunkxceed_libs_doc=self.webpackChunkxceed_libs_doc||[]).push([[3329],{93192:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>d});var n=o(74848),r=o(28453);const l={},s="Cell with multiple fonts",i={id:"code-snippets/cell/cell-with-multiple-fonts",title:"Cell with multiple fonts",description:"This example demonstrates how to set multiple fonts to cells when using the API from the Xceed Workbooks for .NET.",source:"@site/workbooks/code-snippets/cell/cell-with-multiple-fonts.md",sourceDirName:"code-snippets/cell",slug:"/code-snippets/cell/cell-with-multiple-fonts",permalink:"/xceed-libs-doc/workbooks/code-snippets/cell/cell-with-multiple-fonts",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebarsworkbooks",previous:{title:"Cell",permalink:"/xceed-libs-doc/workbooks/category/cell"},next:{title:"Delete cell range",permalink:"/xceed-libs-doc/workbooks/code-snippets/cell/delete-cell-range"}},a={},d=[];function c(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"cell-with-multiple-fonts",children:"Cell with multiple fonts"})}),"\n",(0,n.jsx)(t.p,{children:"This example demonstrates how to set multiple fonts to cells when using the API from the Xceed Workbooks for .NET."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",children:'    public static void CellWithMultipleFont()\r\n    {\r\n      using( var workbook = Workbook.Create( "CellWithMultipleFont.xlsx" ) )\r\n      {\r\n        var worksheet = workbook.Worksheets[ 0 ];\r\n\r\n        // Add a title.\r\n        FormattedText formattedText = new FormattedText( "Text with multiple font", new Font() { Bold = true, Size = 15.5d } );\r\n        worksheet.Cells[ "B1" ].Value = formattedText ;\r\n\r\n        // Create multiple text with different font\r\n        FormattedText formattedText1 = new FormattedText( "This is the first part of the cell ", new Font() { Italic = true, Size = 14, Color = System.Drawing.Color.Aquamarine } );\r\n        FormattedText formattedText2 = new FormattedText( "Here is a normal string " );\r\n        FormattedText formattedText3 = new FormattedText( "Here is another independant text",\r\n          new Font() { Bold = true, Underline = true, UnderlineType = UnderlineType.Double, Color = System.Drawing.Color.Coral} );\r\n\r\n        //Put all the text in a list\r\n        FormattedTextList formattedTextsList = new FormattedTextList { formattedText1, formattedText2, formattedText3 };\r\n        \r\n        //Assign value to the desired cell\r\n        worksheet.Cells[ "B3" ].Value = formattedTextsList;\r\n\r\n        //Save the workbook\r\n        workbook.SaveAs( "CellWithMultipleFont.xlsx" );\r\n        Console.WriteLine( "\\tCreated: CellWithMultipleFont.xlsx\\n" );\r\n      }\r\n    }\r\n\n'})})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},28453:(e,t,o)=>{o.d(t,{R:()=>s,x:()=>i});var n=o(96540);const r={},l=n.createContext(r);function s(e){const t=n.useContext(l);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),n.createElement(l.Provider,{value:t},e.children)}}}]);