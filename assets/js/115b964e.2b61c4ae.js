"use strict";(self.webpackChunkxceed_docs_words=self.webpackChunkxceed_docs_words||[]).push([[1544],{31245:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>h,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var r=n(74848),i=n(28453),a=n(11470),s=n(19365);const o={},h="Keyboard Interactive Authentication",c={id:"basic-concepts/sftp-capabilities/keyboard-interactive-auth",title:"Keyboard Interactive Authentication",description:"SSHClient supports keyboard interactive authentication as defined by RFC 4256. Depending on the requirements of the SSH server, it can be used instead of password authentication.",source:"@site/ftp/basic-concepts/sftp-capabilities/keyboard-interactive-auth.md",sourceDirName:"basic-concepts/sftp-capabilities",slug:"/basic-concepts/sftp-capabilities/keyboard-interactive-auth",permalink:"/xceed-libs-doc/ftp/basic-concepts/sftp-capabilities/keyboard-interactive-auth",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebarftp",previous:{title:"Public Key Authentication",permalink:"/xceed-libs-doc/ftp/basic-concepts/sftp-capabilities/public-key-auth"},next:{title:"Key exchange and algorithm negotiation",permalink:"/xceed-libs-doc/ftp/basic-concepts/sftp-capabilities/key-exch-algorithm-negotiation"}},u={},l=[{value:"How to implement KeyBoardInteractiveAuthenticationHandler",id:"how-to-implement-keyboardinteractiveauthenticationhandler",level:2}];function d(e){const t={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"keyboard-interactive-authentication",children:"Keyboard Interactive Authentication"})}),"\n",(0,r.jsx)(t.p,{children:"SSHClient supports keyboard interactive authentication as defined by RFC 4256. Depending on the requirements of the SSH server, it can be used instead of password authentication."}),"\n",(0,r.jsx)(t.p,{children:"Keyboard interactive is a general purpose authentication method, suitable for interactive authentications where the authentication data is entered via a keyboard or equivalent alphanumeric input device. The major goal of this method is to allow the SSH client to support a whole class of authentication mechanisms without knowing the specifics of the actual authentication mechanisms."}),"\n",(0,r.jsx)(t.p,{children:"In practical terms, with keyboard interactive authentication, the SSH server sends text prompts to the client. These prompts must be given a text answer to. The client sends the responses back to the server. If accepted, more prompts can be sent to the client for response or the authentication can be declared successful or failed."}),"\n",(0,r.jsx)(t.p,{children:"The text prompts are arbitrary strings. There are no standard or predefined texts. The server decides the content of the prompts and what the required response is. As such, the SSHClient class cannot parse or process the prompts it receives as part of keyboard interactive authentication. Your application must process the prompts and supply responses programmatically or display the prompts to the end-user for them to type the responses."}),"\n",(0,r.jsx)(t.p,{children:"To authenticate with keyboard interactive, call Authenticate with a userName and a KeyBoardInteractiveAuthenticationHandler delegate."}),"\n",(0,r.jsxs)(a.A,{children:[(0,r.jsx)(s.A,{value:"csharp",label:"C#",default:!0,children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:'  ssh.Authenticate( "user name", myHandler );\n'})})}),(0,r.jsx)(s.A,{value:"vb.net",label:"Visual Basic .NET",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-vb.NET",children:'  ssh.Authenticate("user name", myHandler)\n'})})})]}),"\n",(0,r.jsx)(t.p,{children:"The delegate KeyBoardInteractiveAuthenticationHandler is a callback method that will be invoked as part of keyboard interactive authentication. It is defined as follows:"}),"\n",(0,r.jsxs)(a.A,{children:[(0,r.jsx)(s.A,{value:"csharp",label:"C#",default:!0,children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"  public delegate void KeyBoardInteractiveAuthenticationHandler(\r\n      string userName,\r\n      string name,\r\n      string instruction,\r\n      string languageTag,\r\n      KeyboardInteractiveRequest[] requests );\n"})})}),(0,r.jsx)(s.A,{value:"vb.net",label:"Visual Basic .NET",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-vb.NET",children:"  Public Delegate Sub KeyBoardInteractiveAuthenticationHandler(ByVal userName As String, ByVal name As String, ByVal instruction As String, ByVal languageTag As String, ByVal requests() As KeyboardInteractiveRequest)\n"})})})]}),"\n",(0,r.jsx)(t.p,{children:"Where:"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.em,{children:"userName"})," is the user name that was specified in the call to the Authenticate method."]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.em,{children:"name"})," is a server-supplied string that may indicate a logical name for the series of requests. It can be an empty string, but it will not be null."]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.em,{children:"instruction"})," is a server-supplied string that may indicate instructions on how to respond to the series of requests. It can be an empty string, but it will not be null."]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.em,{children:"languageTag"})," is a string that specifies the language of the messages. In most cases, this parameter will be an empty string, and the language will be English."]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.em,{children:"requests"})," is an array of KeyboardInteractiveRequest objects that specify the information prompts and their responses. The array will not be null. Each element in the array represents a prompt that must be answered. The response for each element is prefilled with an empty string. It is possible that the array will be empty, but it will not be null."]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"KeyboardInteractiveRequest"})," is a simple class that holds the following properties:"]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.em,{children:"Prompt"}),' is the server-supplied string that specifies what information is required. For example, it could be something like "Password:". There are no pre-defined prompt strings. The server can supply any text it wants here.']}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.em,{children:"Echo"})," is a boolean value that specifies whether the response to the prompt should be echoed to the screen. In general, this value will be false when the prompt refers to sensitive information like passwords and true otherwise."]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.em,{children:"Response"})," is the string that will contain the response to the prompt. Your handler will set the this property's value. The string will then be sent back to the server for authentication. The response can be set to an empty string. If the property is set to null, an empty string will be sent back to the server."]}),"\n",(0,r.jsx)(t.p,{children:"Each request in the requests array represents a prompt. If the prompts are presented to an end-user, each prompt should be displayed to the user one by one and in order. The requests array will typically contain one prompt but it might contain more. The KeyBoardInteractiveAuthenticationHandler might be called again with more prompts. There is no predefined limit on the number of prompts that may be asked."}),"\n",(0,r.jsx)(t.p,{children:"The KeyBoardInteractiveAuthenticationHandler will be invoked by the component on the same thread that Authenticate() was called on. Authenticate() will therefore block while it waits for the KeyBoardInteractiveAuthenticationHandler to return. The component does not impose any timeout on how long control can stay in the handler. However, be aware that some SSH servers enforce a limit on how long authentication takes. For example, the default limit on the OpenSSH server is 120 seconds."}),"\n",(0,r.jsx)(t.h2,{id:"how-to-implement-keyboardinteractiveauthenticationhandler",children:"How to implement KeyBoardInteractiveAuthenticationHandler"}),"\n",(0,r.jsx)(t.p,{children:"If you are certain of the contents and formatting of the prompts you will receive from the server, you may implement a KeyBoardInteractiveAuthenticationHandler method that processes and answers the prompts automatically."}),"\n",(0,r.jsx)(t.p,{children:"Consider this example for OpenSSH servers that use the ChallengeResponseAuthentication option:"}),"\n",(0,r.jsxs)(a.A,{children:[(0,r.jsx)(s.A,{value:"csharp",label:"C#",default:!0,children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:'  public static void KeyBoardInteractiveAuthenticationHandlerLinuxPAM( string userName, string name, string instruction, string languageTag, KeyboardInteractiveRequest[] requests )\r\n  {\r\n    // If we have a request\r\n    if( requests.Length > 0 )\r\n    {\r\n      // If the first request is the string \'Password: \'\r\n      if( StringComparer.OrdinalIgnoreCase.Compare( requests[ 0 ].Prompt, "Password: " ) == 0 )\r\n      {\r\n        // Supply our password as the response\r\n        requests[ 0 ].Response = "<your password>";\r\n      }\r\n    }\r\n  }\n'})})}),(0,r.jsx)(s.A,{value:"vb.net",label:"Visual Basic .NET",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-vb.NET",children:"  Public Shared Sub KeyBoardInteractiveAuthenticationHandlerLinuxPAM(ByVal userName As String, ByVal name As String, ByVal instruction As String, ByVal languageTag As String, ByVal requests() As KeyboardInteractiveRequest)\r\n    ' If we have a request\r\n    If requests.Length > 0 Then\r\n      ' If the first request is the string 'Password: '\r\n      If StringComparer.OrdinalIgnoreCase.Compare(requests(0).Prompt, \"Password: \") = 0 Then\r\n        ' Supply our password as the response\r\n        requests(0).Response = \"<your password>\"\r\n      End If\r\n    End If\r\n  End Sub\n"})})})]}),"\n",(0,r.jsx)(t.p,{children:"Another way to approach this authentication is to display the prompts to the console and accept input for the answers."}),"\n",(0,r.jsxs)(a.A,{children:[(0,r.jsx)(s.A,{value:"csharp",label:"C#",default:!0,children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"  public static void KeyBoardInteractiveAuthenticationHandlerConsole( string userName, string name, string instruction, string languageTag, KeyboardInteractiveRequest[] requests )\r\n  {\r\n    // If the name is non-empty\r\n    if( !String.IsNullOrEmpty( name ) )\r\n    {\r\n      // Display it\r\n      Console.WriteLine( name );\r\n    }\r\n\r\n    // If the instruction is non-empty\r\n    if( !String.IsNullOrEmpty( instruction ) )\r\n    {\r\n      // Display it\r\n      Console.WriteLine( instruction );\r\n    }\r\n\r\n    // If we have a request\r\n    if( requests.Length > 0 )\r\n    {\r\n      // Go through each request in order\r\n      foreach( KeyboardInteractiveRequest request in requests )\r\n      {\r\n        // Display the prompt\r\n        Console.Write( request.Prompt );\r\n\r\n        // If we can display the response as it is being typed\r\n        if( request.Echo )\r\n        {\r\n          // Read the next line of text from the console\r\n          request.Response = Console.ReadLine();\r\n        }\r\n        // We can't display the response\r\n        else\r\n        {\r\n          StringBuilder response = new StringBuilder();\r\n\r\n          // Read a key without displaying it\r\n          ConsoleKeyInfo keyInfo = Console.ReadKey( true );\r\n\r\n          // Until <Enter> is pressed\r\n          while( keyInfo.Key != ConsoleKey.Enter )\r\n          {\r\n            // Add it to the response\r\n            response.Append( keyInfo.KeyChar );\r\n\r\n            // Read a key without displaying it\r\n            keyInfo = Console.ReadKey( true );\r\n          }\r\n\r\n          // Store the response string in the request\r\n          request.Response = response.ToString();\r\n        }\r\n      }\r\n    }\r\n  }\n"})})}),(0,r.jsx)(s.A,{value:"vb.net",label:"Visual Basic .NET",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-vb.NET",children:"  Public Shared Sub KeyBoardInteractiveAuthenticationHandlerConsole(ByVal userName As String, ByVal name As String, ByVal instruction As String, ByVal languageTag As String, ByVal requests() As KeyboardInteractiveRequest)\r\n    ' If the name is non-empty\r\n    If (Not String.IsNullOrEmpty(name)) Then\r\n      ' Display it\r\n      Console.WriteLine(name)\r\n    End If\r\n\r\n    ' If the instruction is non-empty\r\n    If (Not String.IsNullOrEmpty(instruction)) Then\r\n      ' Display it\r\n      Console.WriteLine(instruction)\r\n    End If\r\n\r\n    ' If we have a request\r\n    If requests.Length > 0 Then\r\n      ' Go through each request in order\r\n      For Each request As KeyboardInteractiveRequest In requests\r\n        ' Display the prompt\r\n        Console.Write(request.Prompt)\r\n\r\n        ' If we can display the response as it is being typed\r\n        If request.Echo Then\r\n          ' Read the next line of text from the console\r\n          request.Response = Console.ReadLine()\r\n          ' We can't display the response\r\n        Else\r\n          Dim response As New StringBuilder()\r\n\r\n          ' Read a key without displaying it\r\n          Dim keyInfo As ConsoleKeyInfo = Console.ReadKey(True)\r\n\r\n          ' Until <Enter> is pressed\r\n          Do While keyInfo.Key <> ConsoleKey.Enter\r\n            ' Add it to the response\r\n            response.Append(keyInfo.KeyChar)\r\n\r\n            ' Read a key without displaying it\r\n            keyInfo = Console.ReadKey(True)\r\n          Loop\r\n\r\n          ' Store the response string in the request\r\n          request.Response = response.ToString()\r\n        End If\r\n      Next request\r\n    End If\r\n  End Sub\n"})})})]}),"\n",(0,r.jsx)(t.p,{children:"Here's an example that puts it all together, with the exceptions that Authenticate can throw when called for the keyboard interactive method."}),"\n",(0,r.jsxs)(a.A,{children:[(0,r.jsx)(s.A,{value:"csharp",label:"C#",default:!0,children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"  static void Example()\r\n  {\r\n    string host = \"<host>\";\r\n    string username = \"<username>\";\r\n\r\n    using( SSHClient ssh = new SSHClient() )\r\n    {\r\n      ssh.Connect( host );\r\n\r\n      KeyBoardInteractiveAuthenticationHandler consoleHandler = new KeyBoardInteractiveAuthenticationHandler( KeyBoardInteractiveAuthenticationHandlerConsole );\r\n\r\n      bool retry = false;\r\n\r\n      do\r\n      {\r\n        try\r\n        {\r\n          // Authenticate with the keyboard interactive method\r\n          ssh.Authenticate( username, consoleHandler );\r\n        }\r\n        // Authentication was successful but more authentication is required by the server\r\n        catch( SSHAuthenticationPartialSuccessException e )\r\n        {\r\n          // The 'AuthenticationsThatCanContinue' property specifies the authentications methods that can be tried\r\n          e.AuthenticationsThatCanContinue.ToString();\r\n\r\n          throw;\r\n        }\r\n        // The server rejected one of the keyboard response the user typed. Authentication has failed\r\n        catch( SSHIncorrectResponseException e )\r\n        {\r\n          SSHAuthenticationFailedException authenticationFailedException = e.InnerException as SSHAuthenticationFailedException;\r\n\r\n          if( authenticationFailedException != null )\r\n          {\r\n            // The 'AuthenticationsThatCanContinue' property specifies the authentications methods that can be tried\r\n            authenticationFailedException.AuthenticationsThatCanContinue.ToString();\r\n          }\r\n\r\n          /* TODO: Decide if it is wise to retry the keyboard interactive method, how many times, etc */\r\n          retry = true;\r\n\r\n          if( !retry )\r\n          {\r\n            throw;\r\n          }\r\n        }\r\n        catch( SSHUnsupportedAuthenticationMethodException e )\r\n        {\r\n          // The 'AuthenticationsThatCanContinue' property specifies the authentications methods that can be tried\r\n          e.AuthenticationsThatCanContinue.ToString();\r\n\r\n          throw;\r\n        }\r\n        catch( SSHAuthenticationFailedException e )\r\n        {\r\n          // The 'AuthenticationsThatCanContinue' property specifies the authentications methods that can be tried\r\n          e.AuthenticationsThatCanContinue.ToString();\r\n\r\n          throw;\r\n        }\r\n      }\r\n      while( retry );\r\n\r\n      /* TODO: Perform SSH/SFtp operations */\r\n      using( SFtpSession sftp = new SFtpSession( ssh ) )\r\n      {\r\n\r\n      }\r\n    }\r\n  }\n"})})}),(0,r.jsx)(s.A,{value:"vb.net",label:"Visual Basic .NET",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-vb.NET",children:"  Private Shared Sub Example()\r\n    Dim host As String = \"<host>\"\r\n    Dim username As String = \"<username>\"\r\n\r\n    Using ssh As New SSHClient()\r\n      ssh.Connect(host)\r\n\r\n      Dim consoleHandler As New KeyBoardInteractiveAuthenticationHandler(AddressOf KeyBoardInteractiveAuthenticationHandlerConsole)\r\n\r\n      Dim retry As Boolean = False\r\n\r\n      Do\r\n        Try\r\n          ' Authenticate with the keyboard interactive method\r\n          ssh.Authenticate(username, consoleHandler)\r\n          ' Authentication was successful but more authentication is required by the server\r\n        Catch e As SSHAuthenticationPartialSuccessException\r\n          ' The 'AuthenticationsThatCanContinue' property specifies the authentications methods that can be tried\r\n          e.AuthenticationsThatCanContinue.ToString()\r\n\r\n          Throw\r\n          ' The server rejected one of the keyboard response the user typed. Authentication has failed\r\n        Catch e As SSHIncorrectResponseException\r\n          Dim authenticationFailedException As SSHAuthenticationFailedException = TryCast(e.InnerException, SSHAuthenticationFailedException)\r\n\r\n          If authenticationFailedException IsNot Nothing Then\r\n            ' The 'AuthenticationsThatCanContinue' property specifies the authentications methods that can be tried\r\n            authenticationFailedException.AuthenticationsThatCanContinue.ToString()\r\n          End If\r\n\r\n          ' TODO: Decide if it is wise to retry the keyboard interactive method, how many times, etc \r\n          retry = True\r\n\r\n          If (Not retry) Then\r\n            Throw\r\n          End If\r\n        Catch e As SSHUnsupportedAuthenticationMethodException\r\n          ' The 'AuthenticationsThatCanContinue' property specifies the authentications methods that can be tried\r\n          e.AuthenticationsThatCanContinue.ToString()\r\n\r\n          Throw\r\n        Catch e As SSHAuthenticationFailedException\r\n          ' The 'AuthenticationsThatCanContinue' property specifies the authentications methods that can be tried\r\n          e.AuthenticationsThatCanContinue.ToString()\r\n\r\n          Throw\r\n        End Try\r\n      Loop While retry\r\n\r\n      ' TODO: Perform SSH/SFtp operations \r\n      Using sftp As New SFtpSession(ssh)\r\n\r\n      End Using\r\n    End Using\r\n  End Sub\n"})})})]}),"\n",(0,r.jsx)(t.p,{children:"Some servers require multiple authentications be used to log in. Here is an example that chains different authentications one after the other."}),"\n",(0,r.jsxs)(a.A,{children:[(0,r.jsx)(s.A,{value:"csharp",label:"C#",default:!0,children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"  static void ChainingExample()\r\n  {\r\n    string host = \"<host>\";\r\n    string username = \"<username>\";\r\n    string password = \"<password>\";\r\n\r\n    using( SSHClient ssh = new SSHClient() )\r\n    {\r\n      ssh.Connect( host );\r\n\r\n      bool needsMoreAuthentication = false;\r\n\r\n      try\r\n      {\r\n        // Authenticate with the username/password method\r\n        ssh.Authenticate( username, password );\r\n      }\r\n      // Authentication was successful but more authentication is required by the server\r\n      catch( SSHAuthenticationPartialSuccessException e )\r\n      {\r\n        /* We have successfully authenticated with username/password, but the server needs us\r\n        * to use additional authentication methods */\r\n        needsMoreAuthentication = true;\r\n\r\n        // The 'AuthenticationsThatCanContinue' property specifies the authentications methods that can be tried\r\n        e.AuthenticationsThatCanContinue.ToString();\r\n      }\r\n      catch( SSHUnsupportedAuthenticationMethodException e )\r\n      {\r\n        /* The server doesn't support this authentication. We will use additional authentication\r\n          * methods we support */\r\n        needsMoreAuthentication = true;\r\n\r\n        // The 'AuthenticationsThatCanContinue' property specifies the authentications methods that can be tried\r\n        e.AuthenticationsThatCanContinue.ToString();\r\n      }\r\n      catch( SSHAuthenticationFailedException e )\r\n      {\r\n        // The 'AuthenticationsThatCanContinue' property specifies the authentications methods that can be tried\r\n        e.AuthenticationsThatCanContinue.ToString();\r\n\r\n        throw;\r\n      }\r\n\r\n      // If we need to perform more authentication\r\n      if( needsMoreAuthentication )\r\n      {\r\n        /* We will use the other authentication method we have */\r\n\r\n        KeyBoardInteractiveAuthenticationHandler consoleHandler = new KeyBoardInteractiveAuthenticationHandler( KeyBoardInteractiveAuthenticationHandlerConsole );\r\n\r\n        bool retry = false;\r\n\r\n        do\r\n        {\r\n          try\r\n          {\r\n            // Authenticate with the keyboard interactive method\r\n            ssh.Authenticate( username, consoleHandler );\r\n\r\n            // If we reach here, we have used all our authentication methods and they have been successful\r\n            needsMoreAuthentication = false;\r\n          }\r\n          // Authentication was successful but more authentication is required by the server\r\n          catch( SSHAuthenticationPartialSuccessException e )\r\n          {\r\n            /* At this point, we are out of authentication methods... */\r\n\r\n            throw new Exception( \"Can't authenticate. Used up all authentication methods we support.\", e );\r\n          }\r\n          // The server rejected one of the keyboard response the user typed. Authentication has failed\r\n          catch( SSHIncorrectResponseException e )\r\n          {\r\n            SSHAuthenticationFailedException authenticationFailedException = e.InnerException as SSHAuthenticationFailedException;\r\n\r\n            if( authenticationFailedException != null )\r\n            {\r\n              // The 'AuthenticationsThatCanContinue' property specifies the authentications methods that can be tried\r\n              authenticationFailedException.AuthenticationsThatCanContinue.ToString();\r\n            }\r\n\r\n            /* TODO: Decide if it is wise to retry the keyboard interactive method, how many times, etc */\r\n            retry = true;\r\n\r\n            if( !retry )\r\n            {\r\n              throw;\r\n            }\r\n          }\r\n          catch( SSHUnsupportedAuthenticationMethodException e )\r\n          {\r\n            // The 'AuthenticationsThatCanContinue' property specifies the authentications methods that can be tried\r\n            e.AuthenticationsThatCanContinue.ToString();\r\n\r\n            /* At this point, we are out of authentication methods... */\r\n\r\n            throw new Exception( \"Can't authenticate. Used up all authentication methods we support.\", e );\r\n          }\r\n          catch( SSHAuthenticationFailedException e )\r\n          {\r\n            // The 'AuthenticationsThatCanContinue' property specifies the authentications methods that can be tried\r\n            e.AuthenticationsThatCanContinue.ToString();\r\n\r\n            throw;\r\n          }\r\n        }\r\n        while( retry );\r\n      }\r\n\r\n      /* TODO: Perform SSH/SFtp operations */\r\n      using( SFtpSession sftp = new SFtpSession( ssh ) )\r\n      {\r\n\r\n      }\r\n    }\r\n  }\n"})})}),(0,r.jsx)(s.A,{value:"vb.net",label:"Visual Basic .NET",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-vb.NET",children:"  Private Shared Sub ChainingExample()\r\n    Dim host As String = \"<host>\"\r\n    Dim username As String = \"<username>\"\r\n    Dim password As String = \"<password>\"\r\n\r\n    Using ssh As New SSHClient()\r\n      ssh.Connect(host)\r\n\r\n      Dim needsMoreAuthentication As Boolean = False\r\n\r\n      Try\r\n        ' Authenticate with the username/password method\r\n        ssh.Authenticate(username, password)\r\n        ' Authentication was successful but more authentication is required by the server\r\n      Catch e As SSHAuthenticationPartialSuccessException\r\n        '           We have successfully authenticated with username/password, but the server needs us\r\n        '           * to use additional authentication methods \r\n        needsMoreAuthentication = True\r\n\r\n        ' The 'AuthenticationsThatCanContinue' property specifies the authentications methods that can be tried\r\n        e.AuthenticationsThatCanContinue.ToString()\r\n      Catch e As SSHUnsupportedAuthenticationMethodException\r\n        '           The server doesn't support this authentication. We will use additional authentication\r\n        '            * methods we support \r\n        needsMoreAuthentication = True\r\n\r\n        ' The 'AuthenticationsThatCanContinue' property specifies the authentications methods that can be tried\r\n        e.AuthenticationsThatCanContinue.ToString()\r\n      Catch e As SSHAuthenticationFailedException\r\n        ' The 'AuthenticationsThatCanContinue' property specifies the authentications methods that can be tried\r\n        e.AuthenticationsThatCanContinue.ToString()\r\n\r\n        Throw\r\n      End Try\r\n\r\n      ' If we need to perform more authentication\r\n      If needsMoreAuthentication Then\r\n        ' We will use the other authentication method we have \r\n\r\n        Dim consoleHandler As New KeyBoardInteractiveAuthenticationHandler(AddressOf KeyBoardInteractiveAuthenticationHandlerConsole)\r\n\r\n        Dim retry As Boolean = False\r\n\r\n        Do\r\n          Try\r\n            ' Authenticate with the keyboard interactive method\r\n            ssh.Authenticate(username, consoleHandler)\r\n\r\n            ' If we reach here, we have used all our authentication methods and they have been successful\r\n            needsMoreAuthentication = False\r\n            ' Authentication was successful but more authentication is required by the server\r\n          Catch e As SSHAuthenticationPartialSuccessException\r\n            ' At this point, we are out of authentication methods... \r\n\r\n            Throw New Exception(\"Can't authenticate. Used up all authentication methods we support.\", e)\r\n            ' The server rejected one of the keyboard response the user typed. Authentication has failed\r\n          Catch e As SSHIncorrectResponseException\r\n            Dim authenticationFailedException As SSHAuthenticationFailedException = TryCast(e.InnerException, SSHAuthenticationFailedException)\r\n\r\n            If authenticationFailedException IsNot Nothing Then\r\n              ' The 'AuthenticationsThatCanContinue' property specifies the authentications methods that can be tried\r\n              authenticationFailedException.AuthenticationsThatCanContinue.ToString()\r\n            End If\r\n\r\n            ' TODO: Decide if it is wise to retry the keyboard interactive method, how many times, etc \r\n            retry = True\r\n\r\n            If (Not retry) Then\r\n              Throw\r\n            End If\r\n          Catch e As SSHUnsupportedAuthenticationMethodException\r\n            ' The 'AuthenticationsThatCanContinue' property specifies the authentications methods that can be tried\r\n            e.AuthenticationsThatCanContinue.ToString()\r\n\r\n            ' At this point, we are out of authentication methods... \r\n\r\n            Throw New Exception(\"Can't authenticate. Used up all authentication methods we support.\", e)\r\n          Catch e As SSHAuthenticationFailedException\r\n            ' The 'AuthenticationsThatCanContinue' property specifies the authentications methods that can be tried\r\n            e.AuthenticationsThatCanContinue.ToString()\r\n\r\n            Throw\r\n          End Try\r\n        Loop While retry\r\n      End If\r\n\r\n      ' TODO: Perform SSH/SFtp operations \r\n      Using sftp As New SFtpSession(ssh)\r\n\r\n      End Using\r\n    End Using\r\n  End Sub\n"})})})]})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},19365:(e,t,n)=>{n.d(t,{A:()=>s});n(96540);var r=n(34164);const i={tabItem:"tabItem_Ymn6"};var a=n(74848);function s(e){let{children:t,hidden:n,className:s}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,r.A)(i.tabItem,s),hidden:n,children:t})}},11470:(e,t,n)=>{n.d(t,{A:()=>w});var r=n(96540),i=n(34164),a=n(23104),s=n(56347),o=n(205),h=n(57485),c=n(31682),u=n(70679);function l(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??function(e){return l(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:i}}=e;return{value:t,label:n,attributes:r,default:i}}))}(n);return function(e){const t=(0,c.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const i=(0,s.W6)(),a=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,h.aZ)(a),(0,r.useCallback)((e=>{if(!a)return;const t=new URLSearchParams(i.location.search);t.set(a,e),i.replace({...i.location,search:t.toString()})}),[a,i])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:i}=e,a=d(e),[s,h]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:a}))),[c,l]=m({queryString:n,groupId:i}),[f,y]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[i,a]=(0,u.Dv)(n);return[i,(0,r.useCallback)((e=>{n&&a.set(e)}),[n,a])]}({groupId:i}),b=(()=>{const e=c??f;return p({value:e,tabValues:a})?e:null})();(0,o.A)((()=>{b&&h(b)}),[b]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);h(e),l(e),y(e)}),[l,y,a]),tabValues:a}}var y=n(92303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var A=n(74848);function g(e){let{className:t,block:n,selectedValue:r,selectValue:s,tabValues:o}=e;const h=[],{blockElementScrollPositionUntilNextRender:c}=(0,a.a_)(),u=e=>{const t=e.currentTarget,n=h.indexOf(t),i=o[n].value;i!==r&&(c(t),s(i))},l=e=>{let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const n=h.indexOf(e.currentTarget)+1;t=h[n]??h[0];break}case"ArrowLeft":{const n=h.indexOf(e.currentTarget)-1;t=h[n]??h[h.length-1];break}}t?.focus()};return(0,A.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":n},t),children:o.map((e=>{let{value:t,label:n,attributes:a}=e;return(0,A.jsx)("li",{role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,ref:e=>h.push(e),onKeyDown:l,onClick:u,...a,className:(0,i.A)("tabs__item",b.tabItem,a?.className,{"tabs__item--active":r===t}),children:n??t},t)}))})}function S(e){let{lazy:t,children:n,selectedValue:a}=e;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,A.jsx)("div",{className:"margin-top--md",children:s.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a})))})}function v(e){const t=f(e);return(0,A.jsxs)("div",{className:(0,i.A)("tabs-container",b.tabList),children:[(0,A.jsx)(g,{...t,...e}),(0,A.jsx)(S,{...t,...e})]})}function w(e){const t=(0,y.A)();return(0,A.jsx)(v,{...e,children:l(e.children)},String(t))}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var r=n(96540);const i={},a=r.createContext(i);function s(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);