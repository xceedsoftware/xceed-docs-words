"use strict";(self.webpackChunkxceed_docs_words=self.webpackChunkxceed_docs_words||[]).push([[1458],{84008:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>c,toc:()=>u});var t=r(74848),i=r(28453),o=r(11470),l=r(19365);const s={},a="How to continue a multiple-file transfer",c={id:"code-snippets/working-with-ftpclient-interface/file02",title:"How to continue a multiple-file transfer",description:"Introduction",source:"@site/ftp/code-snippets/working-with-ftpclient-interface/file02.md",sourceDirName:"code-snippets/working-with-ftpclient-interface",slug:"/code-snippets/working-with-ftpclient-interface/file02",permalink:"/xceed-libs-doc/ftp/code-snippets/working-with-ftpclient-interface/file02",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebarftp",previous:{title:"How to connect through an HTTP proxy server",permalink:"/xceed-libs-doc/ftp/code-snippets/working-with-ftpclient-interface/file01"},next:{title:"How to display progress information",permalink:"/xceed-libs-doc/ftp/code-snippets/working-with-ftpclient-interface/file03"}},d={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Synchronous (blocking) and asynchronous (non-blocking) demonstration using FtpClient",id:"synchronous-blocking-and-asynchronous-non-blocking-demonstration-using-ftpclient",level:2},{value:"Asynchronous (non-blocking ) demonstration using AsyncFtpClient",id:"asynchronous-non-blocking--demonstration-using-asyncftpclient",level:2},{value:"Things you should consider",id:"things-you-should-consider",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"how-to-continue-a-multiple-file-transfer",children:"How to continue a multiple-file transfer"})}),"\n",(0,t.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsxs)(n.p,{children:["By default, when calling the ",(0,t.jsx)(n.code,{children:"ReceiveMultipleFiles"})," and ",(0,t.jsx)(n.code,{children:"SendMultipleFiles"})," methods of the FtpClient class or the ",(0,t.jsx)(n.code,{children:"BeginReceiveMultipleFiles"}),"/ ",(0,t.jsx)(n.code,{children:"EndReceiveMultipleFiles"})," methods of the AsyncFtpClient class, if an error occurs during the transfer of one of the files, the entire multiple-file transfer operation will be aborted. To prevent the operation from being aborted or to try to correct the situation, the ",(0,t.jsx)(n.code,{children:"MultipleFileTransferError"})," event can be used."]}),"\n",(0,t.jsxs)(n.p,{children:["In the ",(0,t.jsx)(n.code,{children:"MultipleFileTransferError"})," event, you can decide to Abort the entire operation (default behavior), retry transferring the item that caused the error, or ignore the item that caused the error and continue transferring the other items."]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"AsyncFtpClient's methods now call the corresponding synchronous methods on a background thread. For this reason, the AsyncFtpClient class is now considered obsolete. It is therefore recommended to use FtpClient instead to improve code readability."})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["When using Xceed FTP for .NET in a WinForms application, it is recommended that a SynchronizingObject be assigned to the SynchronizingObject property of the FtpClient class to ensure that the UI remains responsive. For more information, jump to the ",(0,t.jsx)(n.a,{href:"/ftp/basic-concepts/ftp-capabilities/ftp-client-interface/winform-apps-threading",children:"WinForms applications and threading topic"}),"."]})}),"\n",(0,t.jsxs)(n.p,{children:["All the methods above receive the files from the FTP server's current working directory. If you want to receive the files from another location, you could use the ",(0,t.jsx)(n.code,{children:"ChangeCurrentFolder"})," or ",(0,t.jsx)(n.code,{children:"BeginChangeCurrentFolder"}),"/ ",(0,t.jsx)(n.code,{children:"EndChangeCurrentFolder"}),", or ",(0,t.jsx)(n.code,{children:"ChangeToParentFolder"})," or ",(0,t.jsx)(n.code,{children:"BeginChangeToParentFolder"}),"/ ",(0,t.jsx)(n.code,{children:"EndChangeToParentFolder"})," methods to change the current working folder. The current working folder can be retrieved via the ",(0,t.jsx)(n.code,{children:"GetCurrentFolder"})," or ",(0,t.jsx)(n.code,{children:"BeginGetCurrentFolder"}),"/ ",(0,t.jsx)(n.code,{children:"EndGetCurrentFolder"})," methods."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:["Other methods of the FTP client must not be called in this event handler! For example, ",(0,t.jsx)(n.code,{children:"DeleteFile"})," cannot be called to delete an existing file so that the file transfer (for that particular file) can be retried."]})}),"\n",(0,t.jsx)(n.h2,{id:"synchronous-blocking-and-asynchronous-non-blocking-demonstration-using-ftpclient",children:"Synchronous (blocking) and asynchronous (non-blocking) demonstration using FtpClient"}),"\n",(0,t.jsx)(n.p,{children:"The following examples show how to connect to an FTP server through an HTTP proxy server."}),"\n",(0,t.jsxs)(o.A,{children:[(0,t.jsx)(l.A,{value:"csharp",label:"C#",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'  FtpClient ftp = new FtpClient();            \r\n\r\n  // When using FtpClient, you can instruct\r\n  // the library to automatically redirect events on the main UI thread\r\n  // by setting the SynchronizingObject property.\r\n  client.SynchronizingObject = this;\r\n\r\n  ftp.MultipleFileTransferError += new MultipleFileTransferErrorEventHandler( this.transfer_error );\r\n            \r\n\r\n  ftp.Connect( "localhost" );\r\n  ftp.Login();\r\n  ftp.ChangeCurrentFolder( "ClientFiles" );\r\n  ftp.ReceiveMultipleFiles( string.Empty, @"C:\\ClientFiles", false, false );\r\n  ftp.Disconnect(); \r\n\r\n  ftp.MultipleFileTransferError -= new MultipleFileTransferErrorEventHandler( this.transfer_error ); \r\n            \r\n\r\n  private void transfer_error( object sender, MultipleFileTransferErrorEventArgs e )\r\n  {\r\n    FtpReplyException exception = e.Exception as FtpReplyException;\r\n\r\n    if( exception != null )\r\n    {\r\n      listBox1.Items.Add( "Unable to transfer " + e.RemoteItemName + \r\n                          ". The message returned by the FTP server was : " + e.Exception.Message );\r\n      e.Action = MultipleFileTransferErrorAction.Ignore;\r\n    }\r\n  }\n'})})}),(0,t.jsx)(l.A,{value:"vb.net",label:"Visual Basic .NET",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-vb.NET",children:'  Dim ftp As New FtpClient()            \r\n\r\n  \' When using FtpClient, you can instruct\r\n  \' the library to automatically redirect events on the main UI thread\r\n  \' by setting the SynchronizingObject property.\r\n  client.SynchronizingObject = Me\r\n\r\n  AddHandler ftp.MultipleFileTransferError, AddressOf Me.transfer_error            \r\n\r\n  ftp.Connect( "localhost" )\r\n  ftp.Login()\r\n  ftp.ChangeCurrentFolder\r\n  ftp.Login()\r\n  ftp.ChangeCurrentFolder( "ClientFiles" )\r\n  ftp.ReceiveMultipleFiles( String.Empty, "C:\\ClientFiles", False, False )\r\n  ftp.Disconnect() \r\n\r\n  RemoveHandler ftp.MultipleFileTransferError, AddressOf Me.transfer_error            \r\n\r\n  Private Sub transfer_error( ByVal sender As Object, _\r\n                              ByVal e As MultipleFileTransferErrorEventArgs )            \r\n\r\n    If TypeOf e.Exception Is FtpReplyException Then\r\n      ListBox1.Items.Add("Unable to transfer " + e.RemoteItemName + _\r\n                        ". The message returned by the FTP server was : " + e.Exception.Message)\r\n        e.Action = MultipleFileTransferErrorAction.Ignore\r\n    End If\r\n  End Sub\n'})})})]}),"\n",(0,t.jsx)(n.h2,{id:"asynchronous-non-blocking--demonstration-using-asyncftpclient",children:"Asynchronous (non-blocking ) demonstration using AsyncFtpClient"}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["AsyncFtpClient's methods now call the corresponding synchronous methods on a background thread. For this reason, the AsyncFtpClient class is now considered obsolete. It is therefore recommended to use FtpClient and assign a ",(0,t.jsx)(n.code,{children:"SynchronizingObject"})," to its ",(0,t.jsx)(n.code,{children:"SynchronizingObject"})," property to improve code readability."]})}),"\n",(0,t.jsxs)(n.p,{children:["The following example demonstrates how to use the ",(0,t.jsx)(n.code,{children:"MultipleFileTransferError"})," event to continue downloading during the multiple-file transfer even when one of the files causes an error. A synchronous (blocking) demonstration is also available."]}),"\n",(0,t.jsx)(n.p,{children:'To clarify the code, instead of using callbacks, we will wait for completion of the operation before calling the matching "End" method. More information is available in the WinForms application and threading topic.'}),"\n",(0,t.jsxs)(o.A,{children:[(0,t.jsx)(l.A,{value:"csharp",label:"C#",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'    AsyncFtpClient ftp = new AsyncFtpClient();\r\n      \r\n    ftp.MultipleFileTransferError += new MultipleFileTransferErrorEventHandler( this.transfer_error );\r\n                \r\n    IAsyncResult result = ftp.BeginConnect( "localhost", null, null );\r\n    \r\n    while( !result.IsCompleted )\r\n      Application.DoEvents();\r\n    \r\n    ftp.EndConnect( result );\r\n    \r\n    result = ftp.BeginLogin( null, null );\r\n    \r\n    while( !result.IsCompleted )\r\n      Application.DoEvents();\r\n    \r\n    ftp.EndLogin( result );\r\n                \r\n    result = ftp.BeginChangeCurrentFolder( "ClientFiles", null, null );\r\n    \r\n    while( !result.IsCompleted )\r\n      Application.DoEvents();\r\n    \r\n    ftp.EndChangeCurrentFolder( result );\r\n    \r\n    result = ftp.BeginReceiveMultipleFiles( string.Empty, @"C:\\ClientFiles", false, false, null, null );\r\n    \r\n    while( !result.IsCompleted )\r\n      Application.DoEvents();\r\n    \r\n    ftp.EndReceiveMultipleFiles( result );\r\n    \r\n    result = ftp.BeginDisconnect( null, null );\r\n    \r\n    while( !result.IsCompleted )\r\n      Application.DoEvents();\r\n    \r\n    ftp.EndDisconnect( result );\r\n    \r\n    ftp.MultipleFileTransferError -= new MultipleFileTransferErrorEventHandler( this.transfer_error );\r\n                \r\n    private void transfer_error( object sender, MultipleFileTransferErrorEventArgs e )\r\n    {\r\n      FtpReplyException exception = e.Exception as FtpReplyException;\r\n                  \r\n      if( exception != null )\r\n      {\r\n        listBox1.Items.Add( "Unable to transfer " + e.RemoteItemName +\r\n                            ". The message returned by the FTP server was : " + e.Exception.Message );\r\n        e.Action = MultipleFileTransferErrorAction.Ignore;\r\n      }\r\n    }\n'})})}),(0,t.jsx)(l.A,{value:"vb.net",label:"Visual Basic .NET",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-vb.NET",children:'  Dim ftp As New AsyncFtpClient()\r\n\r\n  AddHandler ftp.MultipleFileTransferError, AddressOf Me.transfer_error\r\n\r\n  Dim result As IAsyncResult = ftp.BeginConnect("localhost", Nothing, Nothing)\r\n\r\n  While Not result.IsCompleted\r\n    Application.DoEvents()\r\n  End While\r\n\r\n  ftp.EndConnect( result )\r\n\r\n  result = ftp.BeginLogin( Nothing, Nothing )\r\n\r\n  While Not result.IsCompleted\r\n    Application.DoEvents()\r\n  End While\r\n\r\n  ftp.EndLogin( result )\r\n\r\n  result = ftp.BeginChangeCurrentFolder( "ClientFiles", Nothing, Nothing )\r\n\r\n  While Not result.IsCompleted\r\n    Application.DoEvents()\r\n  End While\r\n\r\n  ftp.EndChangeCurrentFolder( result )\r\n\r\n  result = ftp.BeginReceiveMultipleFiles( String.Empty, "C:\\ClientFiles", False, False, Nothing, Nothing )\r\n\r\n  While Not result.IsCompleted\r\n    Application.DoEvents()\r\n  End While\r\n\r\n  ftp.EndReceiveMultipleFiles( result )\r\n\r\n  result = ftp.BeginDisconnect( Nothing, Nothing )\r\n\r\n  While Not result.IsCompleted\r\n    Application.DoEvents()\r\n  End While\r\n\r\n  ftp.EndDisconnect( result )\r\n\r\n  RemoveHandler ftp.MultipleFileTransferError, AddressOf Me.transfer_error\r\n\r\n  Private Sub transfer_error(ByVal sender As Object, ByVal e As MultipleFileTransferErrorEventArgs)\r\n\r\n    If TypeOf e.Exception Is FtpReplyException Then\r\n      ListBox1.Items.Add("Unable to transfer " + e.RemoteItemName + _\r\n                        ". The message returned by the FTP server was : " + e.Exception.Message)\r\n      e.Action = MultipleFileTransferErrorAction.Ignore\r\n    End If\r\n  End Sub\n'})})})]}),"\n",(0,t.jsx)(n.h2,{id:"things-you-should-consider",children:"Things you should consider"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Are you using Xceed FTP for .NET in a WinForms application? Use the ",(0,t.jsx)(n.code,{children:"AsyncFtpClient"})," class rather than the ",(0,t.jsx)(n.code,{children:"FtpClient"})," class."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Do you want the FTP server to initiate the data connection rather than the FTP client? Set the ",(0,t.jsx)(n.code,{children:"PassiveTransfer"})," property to false."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Do you want the file(s) to be received in ASCII mode rather than binary? Set the ",(0,t.jsx)(n.code,{children:"RepresentationType"})," property to ASCII."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Do you want to decrease or increase the period of time after which an FTP operation should timeout? Change the value of the ",(0,t.jsx)(n.code,{children:"Timeout"})," property."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Do you want to create a log file of the FTP process? Set the ",(0,t.jsx)(n.code,{children:"TraceWriter"})," property."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Do you want to know the state of the FTP client? Check the ",(0,t.jsx)(n.code,{children:"Connected"})," and ",(0,t.jsx)(n.code,{children:"Busy"})," properties. You can also check the State property for specific state information. The ",(0,t.jsx)(n.code,{children:"StateChanged"})," event can also be used to know when the state of the FTP client changes."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Do you want to know when a file is being received? Handle the ",(0,t.jsx)(n.code,{children:"ReceivingFile"})," event."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Do you want to display progress information? Handle the ",(0,t.jsx)(n.code,{children:"FileTransferStatus"})," event."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Do you want to abort the FTP operation? Call the Abort method. **Note that the Abort method should not be called in the ",(0,t.jsx)(n.code,{children:"MultipleFileTransferError"})," event. If you want the multiple-file transfer operation to automatically abort if an error occurs, set e.Action to MutlipleFileTransferErrorAction.Abort (default value). **"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Do you want to prevent routers from prematurely closing the command channel while a long data transfer is taking place. Set the ",(0,t.jsx)(n.code,{children:"KeepAliveInterval"})," property."]}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},19365:(e,n,r)=>{r.d(n,{A:()=>l});r(96540);var t=r(34164);const i={tabItem:"tabItem_Ymn6"};var o=r(74848);function l(e){let{children:n,hidden:r,className:l}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,t.A)(i.tabItem,l),hidden:r,children:n})}},11470:(e,n,r)=>{r.d(n,{A:()=>j});var t=r(96540),i=r(34164),o=r(23104),l=r(56347),s=r(205),a=r(57485),c=r(31682),d=r(70679);function u(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:r}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:r,attributes:t,default:i}}=e;return{value:n,label:r,attributes:t,default:i}}))}(r);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,r])}function p(e){let{value:n,tabValues:r}=e;return r.some((e=>e.value===n))}function f(e){let{queryString:n=!1,groupId:r}=e;const i=(0,l.W6)(),o=function(e){let{queryString:n=!1,groupId:r}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:n,groupId:r});return[(0,a.aZ)(o),(0,t.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(i.location.search);n.set(o,e),i.replace({...i.location,search:n.toString()})}),[o,i])]}function g(e){const{defaultValue:n,queryString:r=!1,groupId:i}=e,o=h(e),[l,a]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=r.find((e=>e.default))??r[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:o}))),[c,u]=f({queryString:r,groupId:i}),[g,m]=function(e){let{groupId:n}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,o]=(0,d.Dv)(r);return[i,(0,t.useCallback)((e=>{r&&o.set(e)}),[r,o])]}({groupId:i}),b=(()=>{const e=c??g;return p({value:e,tabValues:o})?e:null})();(0,s.A)((()=>{b&&a(b)}),[b]);return{selectedValue:l,selectValue:(0,t.useCallback)((e=>{if(!p({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);a(e),u(e),m(e)}),[u,m,o]),tabValues:o}}var m=r(92303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=r(74848);function v(e){let{className:n,block:r,selectedValue:t,selectValue:l,tabValues:s}=e;const a=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.a_)(),d=e=>{const n=e.currentTarget,r=a.indexOf(n),i=s[r].value;i!==t&&(c(n),l(i))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const r=a.indexOf(e.currentTarget)+1;n=a[r]??a[0];break}case"ArrowLeft":{const r=a.indexOf(e.currentTarget)-1;n=a[r]??a[a.length-1];break}}n?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":r},n),children:s.map((e=>{let{value:n,label:r,attributes:o}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>a.push(e),onKeyDown:u,onClick:d,...o,className:(0,i.A)("tabs__item",b.tabItem,o?.className,{"tabs__item--active":t===n}),children:r??n},n)}))})}function y(e){let{lazy:n,children:r,selectedValue:o}=e;const l=(Array.isArray(r)?r:[r]).filter(Boolean);if(n){const e=l.find((e=>e.props.value===o));return e?(0,t.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:l.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==o})))})}function F(e){const n=g(e);return(0,x.jsxs)("div",{className:(0,i.A)("tabs-container",b.tabList),children:[(0,x.jsx)(v,{...n,...e}),(0,x.jsx)(y,{...n,...e})]})}function j(e){const n=(0,m.A)();return(0,x.jsx)(F,{...e,children:u(e.children)},String(n))}},28453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>s});var t=r(96540);const i={},o=t.createContext(i);function l(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);