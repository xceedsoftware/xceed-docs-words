"use strict";(self.webpackChunkxceed_docs_words=self.webpackChunkxceed_docs_words||[]).push([[4262],{62740:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>d,toc:()=>p});var t=r(74848),i=r(28453),s=r(11470),a=r(19365);const o={},l="Unzipping encrypted items that use 'compatible' encryption",d={id:"code-snippets/unzipping/unzipping-encrypted-itemsuse-compatible-encryption",title:"Unzipping encrypted items that use 'compatible' encryption",description:"When decrypting data using Compatible encryption, the password verification isn't 100% accurate.",source:"@site/zip/code-snippets/unzipping/unzipping-encrypted-itemsuse-compatible-encryption.md",sourceDirName:"code-snippets/unzipping",slug:"/code-snippets/unzipping/unzipping-encrypted-itemsuse-compatible-encryption",permalink:"/xceed-libs-doc/zip/code-snippets/unzipping/unzipping-encrypted-itemsuse-compatible-encryption",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebarzip",previous:{title:"Unzipping (QuickZip)",permalink:"/xceed-libs-doc/zip/code-snippets/unzipping/unzipping-quickzip"},next:{title:"Listing",permalink:"/xceed-libs-doc/zip/category/listing"}},c={},p=[{value:"Handling paths",id:"handling-paths",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Things you should consider",id:"things-you-should-consider",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"unzipping-encrypted-items-that-use-compatible-encryption",children:"Unzipping encrypted items that use 'compatible' encryption"})}),"\n",(0,t.jsxs)(n.p,{children:["When decrypting data using ",(0,t.jsx)(n.code,{children:"Compatible"})," encryption, the password verification isn't 100% accurate."]}),"\n",(0,t.jsx)(n.p,{children:"It is possible that an invalid password will not be detected. In that case, decryption will process but the decrypted data will be garbage. This is an unfortunate design flaw of the encryption algorithm."}),"\n",(0,t.jsxs)(n.p,{children:["This behavior only applies to items encrypted with the ",(0,t.jsx)(n.code,{children:"Compatible"})," encryption method."]}),"\n",(0,t.jsx)(n.p,{children:"In the context of unzipping, this will always result in a decompression failure or a checksum failure so no incorrect data will ever be delivered. However, special care needs to be taken when handling exceptions."}),"\n",(0,t.jsx)(n.p,{children:"This example shows how this situation can be handled. It examines the exceptions thrown by decompression as well as what kind of items being processed to distinguish between an actual data error and a probable invalid password."}),"\n",(0,t.jsx)(n.p,{children:"If all the encrypted items in an archive use the same password, this example is not absolutely necessary as any error can be treated in the same way. For example, many third party Zip tools will say something like: \"Data error in item 'X'. Wrong password?\"."}),"\n",(0,t.jsxs)(s.A,{children:[(0,t.jsx)(a.A,{value:"csharp",label:"C#",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'  using System;\r\n\r\n  using Xceed.FileSystem;\r\n  using Xceed.Zip;\r\n\r\n  namespace DocumentationExamples.Zip\r\n  {\r\n    class CompatibleEncryption\r\n    {\r\n      private void OnItemProgression( object sender, ItemProgressionEventArgs e )\r\n      {\r\n        /* We\'re about to process a new item */\r\n\r\n        // Reset the password index\r\n        this.m_passwordIndex = 0;\r\n      }\r\n\r\n      private void OnItemException( object sender, ItemExceptionEventArgs e )\r\n      {\r\n        bool badPassword = false;\r\n\r\n        // Get the archive object we passed through the user data\r\n        ZipArchive zip = ( ZipArchive ) e.UserData;\r\n\r\n        /* We will try to ascertain if we have an invalid password */\r\n\r\n        InvalidDecryptionPasswordException invalidDecryptionPasswordException;\r\n        FileSystemIOException fileSystemIOException;\r\n\r\n        invalidDecryptionPasswordException = e.Exception as InvalidDecryptionPasswordException;\r\n        fileSystemIOException = e.Exception as FileSystemIOException;\r\n\r\n        // If the exception says that a bad password was supplied\r\n        if( invalidDecryptionPasswordException != null )\r\n        {\r\n          badPassword = true;\r\n        }\r\n        // If we had an I/O error during decryption\r\n        else if( fileSystemIOException != null )\r\n        {\r\n          ZippedFile zippedFile = e.CurrentItem as ZippedFile;\r\n\r\n          // If we were reading from a zipped file encrypted in the \'compatible\' method\r\n          if( zippedFile != null && zippedFile.Encrypted && \r\n              zippedFile.EncryptionMethod.Equals( EncryptionMethod.Compatible ) )\r\n          {\r\n            /* It\'s possible the I/O error occurred because the password is invalid.\r\n            The way the \'compatible\' encryption is designed doesn\'t provide for 100%\r\n            accurate bad password detection, unfortunately. */\r\n            badPassword = true;\r\n          }\r\n        }\r\n\r\n        // If we had a bad password\r\n        if( badPassword )\r\n        {\r\n          // If we haven\'t gone through our password list\r\n          if( this.m_passwordIndex < this.m_passwords.Length )\r\n          {\r\n            // Set the current password and move the index to the next password\r\n            zip.DefaultDecryptionPassword = this.m_passwords[ this.m_passwordIndex++ ];\r\n\r\n            // Retry unzipping the file\r\n            e.Action = ItemExceptionAction.Retry;\r\n          }\r\n          else\r\n          {\r\n            // Skip the file\r\n            e.Action = ItemExceptionAction.Ignore;\r\n          }\r\n        }\r\n      }\r\n\r\n      public void Example()\r\n      {\r\n        AbstractFile zipFile = new DiskFile( @"ZipFileWithEncryptedItems.zip" );\r\n        AbstractFolder destinationFolder = new DiskFolder( @"Output" );\r\n\r\n        ZipArchive zip = new ZipArchive( zipFile );\r\n\r\n        // Set up the list of password possible for the items in this archive\r\n        this.m_passwords = new string[]\r\n        {\r\n          "wrong password",\r\n          "fkE%I-969%=6kei$[BbZ \\"6Iq- =[",\r\n          "}8{)zM#$k//O?t~=iG\'Si{AF\\"S~\\\'/8@1n",\r\n        };\r\n\r\n        ZipEvents events = new ZipEvents();\r\n\r\n        // Subscribe to the events that will allow us to handle invalid passwords\r\n        events.ItemProgression += new ItemProgressionEventHandler( OnItemProgression );\r\n        events.ItemException += new ItemExceptionEventHandler( OnItemException );\r\n\r\n        // Unzip the contents of the archive using the events object we set up\r\n        zip.CopyFilesTo( events, zip, destinationFolder, true, true );\r\n      }\r\n\r\n      private string[] m_passwords;\r\n      private int m_passwordIndex;\r\n    }\r\n  }\n'})})}),(0,t.jsx)(a.A,{value:"vb.net",label:"Visual Basic .NET",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-vb.NET",children:"  Imports Microsoft.VisualBasic\r\n  Imports System\r\n\r\n  Imports Xceed.FileSystem\r\n  Imports Xceed.Zip\r\n\r\n  Namespace DocumentationExamples.Zip\r\n    Friend Class CompatibleEncryption\r\n      Private Sub OnItemProgression(ByVal sender As Object, ByVal e As ItemProgressionEventArgs)\r\n        ' We're about to process a new item \r\n\r\n        ' Reset the password index\r\n        Me.m_passwordIndex = 0\r\n      End Sub\r\n\r\n      Private Sub OnItemException(ByVal sender As Object, ByVal e As ItemExceptionEventArgs)\r\n        Dim badPassword As Boolean = False\r\n\r\n        ' Get the archive object we passed through the user data\r\n        Dim zip As ZipArchive = CType(e.UserData, ZipArchive)\r\n\r\n        ' We will try to ascertain if we have an invalid password \r\n\r\n        Dim invalidDecryptionPasswordException As InvalidDecryptionPasswordException\r\n        Dim fileSystemIOException As FileSystemIOException\r\n\r\n        invalidDecryptionPasswordException = TryCast(e.Exception, InvalidDecryptionPasswordException)\r\n        fileSystemIOException = TryCast(e.Exception, FileSystemIOException)\r\n\r\n        ' If the exception says that a bad password was supplied\r\n        If invalidDecryptionPasswordException IsNot Nothing Then\r\n          badPassword = True\r\n        ' If we had an I/O error during decryption\r\n        ElseIf fileSystemIOException IsNot Nothing Then\r\n          Dim zippedFile As ZippedFile = TryCast(e.CurrentItem, ZippedFile)\r\n\r\n          ' If we were reading from a zipped file encrypted in the 'compatible' method\r\n          If zippedFile IsNot Nothing AndAlso zippedFile.Encrypted AndAlso zippedFile.EncryptionMethod.Equals(EncryptionMethod.Compatible) Then\r\n  '           It's possible the I/O error occurred because the password is invalid.\r\n  '           The way the 'compatible' encryption is designed doesn't provide for 100%\r\n  '           accurate bad password detection, unfortunately. \r\n            badPassword = True\r\n          End If\r\n        End If\r\n\r\n        ' If we had a bad password\r\n        If badPassword Then\r\n          ' If we haven't gone through our password list\r\n          If Me.m_passwordIndex < Me.m_passwords.Length Then\r\n            ' Set the current password and move the index to the next password\r\n            zip.DefaultDecryptionPassword = Me.m_passwords(Me.m_passwordIndex)\r\n            Me.m_passwordIndex += 1\r\n\r\n            ' Retry unzipping the file\r\n            e.Action = ItemExceptionAction.Retry\r\n          Else\r\n            ' Skip the file\r\n            e.Action = ItemExceptionAction.Ignore\r\n          End If\r\n        End If\r\n      End Sub\r\n\r\n      Public Sub Example()\r\n        Dim zipFile As AbstractFile = New DiskFile(\"ZipFileWithEncryptedItems.zip\")\r\n        Dim destinationFolder As AbstractFolder = New DiskFolder(\"Output\")\r\n\r\n        Dim zip As New ZipArchive(zipFile)\r\n\r\n        ' Set up the list of password possible for the items in this archive\r\n        Me.m_passwords = New String() { \"wrong password\", \"fkE%I-969%=6kei$[BbZ \"\"6Iq- =[\", \"}8{)zM#$k//O?t~=iG'Si{AF\"\"S~'/8@1n\" }\r\n\r\n        Dim events As New ZipEvents()\r\n\r\n        ' Subscribe to the events that will allow us to handle invalid passwords\r\n        AddHandler events.ItemProgression, AddressOf OnItemProgression\r\n        AddHandler events.ItemException, AddressOf OnItemException\r\n\r\n        ' Unzip the contents of the archive using the events object we set up\r\n        zip.CopyFilesTo(events, zip, destinationFolder, True, True)\r\n      End Sub\r\n\r\n      Private m_passwords() As String\r\n      Private m_passwordIndex As Integer\r\n    End Class\r\n  End Namespace\n"})})})]}),"\n",(0,t.jsx)(n.p,{children:"In the next example, we will extract the contents of a spanned, self-extracting zip file:"}),"\n",(0,t.jsxs)(s.A,{children:[(0,t.jsx)(a.A,{value:"csharp",label:"C#",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'  using Xceed.Zip;\r\n  using Xceed.Zip.Sfx;\r\n  \r\n  QuickZip.Unzip( @"a:\\sfx.exe", @"d:\\", string.Empty, true, true, false, new QuickZip.DiskRequiredCallback( this.QuickDiskRequired ) ,null, "*" );\r\n  \r\n  // This method will handle the DiskRequired events that are raised when creating\r\n  // spanned or split zip files.\r\n  private bool QuickDiskRequired( string zipFile, int diskNumber, object userData )\r\n  {\r\n    if( MessageBox.Show( "Disk #" + diskNumber.ToString() + " is required.", "Disk Required", MessageBoxButtons.OKCancel ) == DialogResult.OK )\r\n        return true;\r\n    else\r\n        return false;    \r\n  }\n'})})}),(0,t.jsx)(a.A,{value:"vb.net",label:"Visual Basic .NET",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-vb.NET",children:'  Imports Xceed.Zip\r\n  Imports Xceed.Sfx\r\n\r\n  QuickZip.Unzip( "a:\\sfx.exe", "d:\\", string.Empty, true, true, false, New QuickZip.DiskRequiredCallback(AddressOf Me.QuickDiskRequired) ,Nothing, "*" )\r\n\r\n  \' This method will handle the DiskRequired events that are raised when creating\r\n  \' spanned or split zip files.\r\n  Private Function QuickDiskRequired(ByVal zipFile As String, ByVal diskNumber As Integer, ByVal userData As Object) As Boolean\r\n    If (MessageBox.Show("Disk #" + diskNumber.ToString() + " is required.", "Disk Required", MessageBoxButtons.OKCancel) = DialogResult.OK) Then\r\n      Return True\r\n    Else\r\n      Return False\r\n    End If\r\n  End Function\n'})})})]}),"\n",(0,t.jsx)(n.h2,{id:"handling-paths",children:"Handling paths"}),"\n",(0,t.jsx)(n.p,{children:"When extracting files from within a zip file, the directory structure can be restored fully or partrially or it can be omitted altogether."}),"\n",(0,t.jsxs)(n.p,{children:["If the preservePaths parameter of the Unzip method is set to ",(0,t.jsx)(n.strong,{children:"false"}),", the files specified in the filesToUnzip parameter will be restored directly into the root of the destination folder without recreating the directory structure."]}),"\n",(0,t.jsx)(n.p,{children:'For example, if you have a zip file containing files in the "folder1" subfolder and files in the "folder1\\folder2" subfolder, the following code will unzip all files right into "c:\\temp", without creating any subfolders:'}),"\n",(0,t.jsxs)(s.A,{children:[(0,t.jsx)(a.A,{value:"csharp",label:"C#",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'  Xceed.Zip.QuickZip.Unzip( @"c:\\test.zip", @"c:\\temp", true, true, false, @"folder1\\*" );\n'})})}),(0,t.jsx)(a.A,{value:"vb.net",label:"Visual Basic .NET",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-vb.NET",children:'  Xceed.Zip.QuickZip.Unzip( "c:\\test.zip", "c:\\temp", True, True, False, "folder1\\*" )\n'})})})]}),"\n",(0,t.jsxs)(n.p,{children:["If the preservePaths parameter is set to ",(0,t.jsx)(n.strong,{children:"true"}),", the part of the path that is explicitly included in the filesToUnzip parameter will not be restored into the destination folder."]}),"\n",(0,t.jsx)(n.p,{children:'For example, for the same zip file as above, the following code will create the folder "folder2" into the "c:\\temp" destination folder. Files that were in the "folder1" subfolder in the zip will be unzipped directly into the root of "c:\\temp", and files that were in "folder1\\folder2" will be unzipped into "c:\\temp\\folder2":'}),"\n",(0,t.jsxs)(s.A,{children:[(0,t.jsx)(a.A,{value:"csharp",label:"C#",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'  Xceed.Zip.QuickZip.Unzip( @"c:\\test.zip", @"c:\\temp", true, true, true, @"folder1\\*" );\n'})})}),(0,t.jsx)(a.A,{value:"vb.net",label:"Visual Basic .NET",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-vb.NET",children:'  Xceed.Zip.QuickZip.Unzip( "c:\\test.zip", "c:\\temp", True, True, True, "folder1\\*" )\n'})})})]}),"\n",(0,t.jsx)(n.p,{children:'The following example will unzip files into "c:\\temp\\folder1" and "c:\\temp\\folder1\\folder2":'}),"\n",(0,t.jsxs)(s.A,{children:[(0,t.jsx)(a.A,{value:"csharp",label:"C#",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'  Xceed.Zip.QuickZip.Unzip( @"c:\\test.zip", @"c:\\temp", true, true, true, @"*" );\n'})})}),(0,t.jsx)(a.A,{value:"vb.net",label:"Visual Basic .NET",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-vb.NET",children:'  Xceed.Zip.QuickZip.Unzip( "c:\\test.zip", "c:\\temp", True, True, True, "*" )\n'})})})]}),"\n",(0,t.jsx)(n.h2,{id:"remarks",children:"Remarks"}),"\n",(0,t.jsx)(n.p,{children:"Note that the filesToUntar parameter of the Untar method cannot be null; otherwise, an ArgumentNullException exception will be thrown."}),"\n",(0,t.jsx)(n.h2,{id:"things-you-should-consider",children:"Things you should consider"}),"\n",(0,t.jsx)(n.p,{children:"The main questions you should ask yourself when extracting files from a Tar archive are:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Do you want to do more complex Tar archive operations? Use the FileSystem-based classes defined within the ",(0,t.jsx)(n.code,{children:"Xceed.Tar"}),"."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},19365:(e,n,r)=>{r.d(n,{A:()=>a});r(96540);var t=r(34164);const i={tabItem:"tabItem_Ymn6"};var s=r(74848);function a(e){let{children:n,hidden:r,className:a}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,t.A)(i.tabItem,a),hidden:r,children:n})}},11470:(e,n,r)=>{r.d(n,{A:()=>I});var t=r(96540),i=r(34164),s=r(23104),a=r(56347),o=r(205),l=r(57485),d=r(31682),c=r(70679);function p(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:r}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return p(e).map((e=>{let{props:{value:n,label:r,attributes:t,default:i}}=e;return{value:n,label:r,attributes:t,default:i}}))}(r);return function(e){const n=(0,d.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,r])}function h(e){let{value:n,tabValues:r}=e;return r.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:r}=e;const i=(0,a.W6)(),s=function(e){let{queryString:n=!1,groupId:r}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:n,groupId:r});return[(0,l.aZ)(s),(0,t.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(i.location.search);n.set(s,e),i.replace({...i.location,search:n.toString()})}),[s,i])]}function f(e){const{defaultValue:n,queryString:r=!1,groupId:i}=e,s=u(e),[a,l]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=r.find((e=>e.default))??r[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:s}))),[d,p]=m({queryString:r,groupId:i}),[f,b]=function(e){let{groupId:n}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,s]=(0,c.Dv)(r);return[i,(0,t.useCallback)((e=>{r&&s.set(e)}),[r,s])]}({groupId:i}),w=(()=>{const e=d??f;return h({value:e,tabValues:s})?e:null})();(0,o.A)((()=>{w&&l(w)}),[w]);return{selectedValue:a,selectValue:(0,t.useCallback)((e=>{if(!h({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),p(e),b(e)}),[p,b,s]),tabValues:s}}var b=r(92303);const w={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=r(74848);function g(e){let{className:n,block:r,selectedValue:t,selectValue:a,tabValues:o}=e;const l=[],{blockElementScrollPositionUntilNextRender:d}=(0,s.a_)(),c=e=>{const n=e.currentTarget,r=l.indexOf(n),i=o[r].value;i!==t&&(d(n),a(i))},p=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const r=l.indexOf(e.currentTarget)+1;n=l[r]??l[0];break}case"ArrowLeft":{const r=l.indexOf(e.currentTarget)-1;n=l[r]??l[l.length-1];break}}n?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":r},n),children:o.map((e=>{let{value:n,label:r,attributes:s}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>l.push(e),onKeyDown:p,onClick:c,...s,className:(0,i.A)("tabs__item",w.tabItem,s?.className,{"tabs__item--active":t===n}),children:r??n},n)}))})}function v(e){let{lazy:n,children:r,selectedValue:s}=e;const a=(Array.isArray(r)?r:[r]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===s));return e?(0,t.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function y(e){const n=f(e);return(0,x.jsxs)("div",{className:(0,i.A)("tabs-container",w.tabList),children:[(0,x.jsx)(g,{...n,...e}),(0,x.jsx)(v,{...n,...e})]})}function I(e){const n=(0,b.A)();return(0,x.jsx)(y,{...e,children:p(e.children)},String(n))}},28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var t=r(96540);const i={},s=t.createContext(i);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);