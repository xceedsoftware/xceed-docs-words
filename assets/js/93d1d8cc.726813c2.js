"use strict";(self.webpackChunkxceed_docs_words=self.webpackChunkxceed_docs_words||[]).push([[2104],{58717:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>u,contentTitle:()=>c,default:()=>m,frontMatter:()=>t,metadata:()=>r,toc:()=>a});var s=n(74848),l=n(28453);const t={},c="Column cell access",r={id:"code-snippets/column/column-cell-access",title:"Column cell access",description:"This example demonstrates how to set collumn cell access when using the API from the Xceed Workbooks for .NET.",source:"@site/workbooks/code-snippets/column/column-cell-access.md",sourceDirName:"code-snippets/column",slug:"/code-snippets/column/column-cell-access",permalink:"/xceed-libs-doc/workbooks/code-snippets/column/column-cell-access",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebarsworkbooks",previous:{title:"Clear column contents",permalink:"/xceed-libs-doc/workbooks/code-snippets/column/clear-column-contents"},next:{title:"Customize columns",permalink:"/xceed-libs-doc/workbooks/code-snippets/column/customize-columns"}},u={},a=[];function i(e){const o={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(o.header,{children:(0,s.jsx)(o.h1,{id:"column-cell-access",children:"Column cell access"})}),"\n",(0,s.jsx)(o.p,{children:"This example demonstrates how to set collumn cell access when using the API from the Xceed Workbooks for .NET."}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-csharp",children:'    public static void ColumnCellAccess()\r\n    {\r\n      using( var workbook = Workbook.Create( "ColumnCellAccess.xlsx" ) )\r\n      {\r\n        // Get the first worksheet. A workbook contains at least 1 worksheet.\r\n        var worksheet = workbook.Worksheets[ 0 ];\r\n\r\n        // Get 4th column. Indexing starts at 0 for columns.\r\n        var columnD = worksheet.Columns[ 3 ];\r\n        // Get column "F". Indexing starts at "A" for columns.\r\n        var columnF = worksheet.Columns[ "F" ];\r\n\r\n        // Add a title.\r\n        worksheet.Cells[ "B1" ].Value = "Cell Access";\r\n        worksheet.Cells[ "B1" ].Style.Font = new Font() { Bold = true, Size = 15.5d };\r\n\r\n        // Set a value in cells located at 4th column. Indexing starts at 0 for columns\'s cells.\r\n        columnD.Cells[ 1 ].Value = "Cell value for 2nd cell of ColumnId 3";\r\n        columnD.Cells[ 3 ].Value = "Cell value for 4th cell of ColumnId 3";\r\n        columnF.Cells[ 8 ].Value = "Cell value for 9th cell of Column F";\r\n\r\n        // Set AutoFit for columns with values.\r\n        worksheet.Columns[ 1 ].AutoFit();\r\n        worksheet.Columns[ 3 ].AutoFit();\r\n        worksheet.Columns[ "F" ].AutoFit();\r\n\r\n        // Making sure only 2 cells in the 4th column exists and 1 in column "F" (the modified cells).\r\n        Debug.Assert( columnD.Cells.Count == 2 );\r\n        Debug.Assert( columnF.Cells.Count == 1 );\r\n\r\n        // Save workbook to disk.\r\n        workbook.Save();\r\n        Console.WriteLine( "\\tCreated: ColumnCellAccess.xlsx\\n" );\r\n      }\r\n    }\n'})})]})}function m(e={}){const{wrapper:o}={...(0,l.R)(),...e.components};return o?(0,s.jsx)(o,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}},28453:(e,o,n)=>{n.d(o,{R:()=>c,x:()=>r});var s=n(96540);const l={},t=s.createContext(l);function c(e){const o=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function r(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:c(e.components),s.createElement(t.Provider,{value:o},e.children)}}}]);