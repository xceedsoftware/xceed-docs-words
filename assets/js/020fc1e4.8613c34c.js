"use strict";(self.webpackChunkxceed_libs_doc=self.webpackChunkxceed_libs_doc||[]).push([[5708],{11139:(e,o,r)=>{r.r(o),r.d(o,{assets:()=>i,contentTitle:()=>c,default:()=>w,frontMatter:()=>n,metadata:()=>l,toc:()=>a});var s=r(74848),t=r(28453);const n={},c="Row Cell access",l={id:"code-snippets/row/row-cell-access",title:"Row Cell access",description:"This example demonstrates how to access to cell using a row when using the API from the Xceed Workbooks for .NET.",source:"@site/workbooks/code-snippets/row/row-cell-access.md",sourceDirName:"code-snippets/row",slug:"/code-snippets/row/row-cell-access",permalink:"/xceed-libs-doc/workbooks/code-snippets/row/row-cell-access",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebarsworkbooks",previous:{title:"Row",permalink:"/xceed-libs-doc/workbooks/category/row"},next:{title:"Customize Rows",permalink:"/xceed-libs-doc/workbooks/code-snippets/row/customize-rows"}},i={},a=[];function d(e){const o={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(o.header,{children:(0,s.jsx)(o.h1,{id:"row-cell-access",children:"Row Cell access"})}),"\n",(0,s.jsx)(o.p,{children:"This example demonstrates how to access to cell using a row when using the API from the Xceed Workbooks for .NET."}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-csharp",children:'    public static void RowCellAccess()\r\n    {\r\n      using( var workbook = Workbook.Create( "RowCellAccess.xlsx" ) )\r\n      {\r\n        // Get the first worksheet. A workbook contains at least 1 worksheet.\r\n        var worksheet = workbook.Worksheets[ 0 ];\r\n\r\n        // Get 4th row. Indexing starts at 0 for rows.\r\n        var row = worksheet.Rows[ 3 ];\r\n\r\n        // Add a title.\r\n        worksheet.Cells[ "B1" ].Value = "Cell Access";\r\n        worksheet.Cells[ "B1" ].Style.Font = new Font() { Bold = true, Size = 15.5d };\r\n\r\n        // Set a value in cell located at 4th row. Indexing starts at 0 for row\'s cells.\r\n        row.Cells[ 1 ].Value = "Cell value for 2nd cell of RowId 3";\r\n        row.Cells[ "D" ].Value = "Cell value for cell in column \'D\' of RowId 3";\r\n\r\n        // Set AutoFit for columns with values.\r\n        worksheet.Columns[ 1 ].AutoFit();\r\n        worksheet.Columns[ "D" ].AutoFit();\r\n\r\n        // Making sure only 2 cells in the 4th row exists (the modified cells).\r\n        Debug.Assert( row.Cells.Count == 2 );\r\n\r\n        // Save workbook to disk.\r\n        workbook.Save();\r\n        Console.WriteLine( "\\tCreated: RowCellAccess.xlsx\\n" );\r\n      }\r\n    }\r\n\n'})})]})}function w(e={}){const{wrapper:o}={...(0,t.R)(),...e.components};return o?(0,s.jsx)(o,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,o,r)=>{r.d(o,{R:()=>c,x:()=>l});var s=r(96540);const t={},n=s.createContext(t);function c(e){const o=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function l(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),s.createElement(n.Provider,{value:o},e.children)}}}]);