"use strict";(self.webpackChunkxceed_docs_words=self.webpackChunkxceed_docs_words||[]).push([[1232],{46912:(e,r,o)=>{o.r(r),o.d(r,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>n,metadata:()=>d,toc:()=>i});var t=o(74848),l=o(28453);const n={},s="Set borders",d={id:"code-snippets/style/set-borders",title:"Set borders",description:"This example demonstrates how to set borders when using the API from the Xceed Workbooks for .NET.",source:"@site/workbooks/code-snippets/style/set-borders.md",sourceDirName:"code-snippets/style",slug:"/code-snippets/style/set-borders",permalink:"/xceed-libs-doc/workbooks/code-snippets/style/set-borders",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebarsworkbooks",previous:{title:"Set alignments",permalink:"/xceed-libs-doc/workbooks/code-snippets/style/set-alignment"},next:{title:"Text direction & orientation",permalink:"/xceed-libs-doc/workbooks/code-snippets/style/text-direction-orientation"}},c={},i=[];function a(e){const r={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"set-borders",children:"Set borders"})}),"\n",(0,t.jsx)(r.p,{children:"This example demonstrates how to set borders when using the API from the Xceed Workbooks for .NET."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:'    public static void SetBorders()\r\n    {\r\n      using( var workbook = Workbook.Create( "SetBorders.xlsx" ) )\r\n      {\r\n        // Get the first worksheet. A workbook contains at least 1 worksheet.\r\n        var cellWorksheet = workbook.Worksheets[ 0 ];\r\n\r\n        // Add a title.\r\n        cellWorksheet.Cells[ "B1" ].Value = "Set Borders";\r\n        cellWorksheet.Cells[ "B1" ].Style.Font = new Font() { Bold = true, Size = 15.5d };\r\n\r\n        // Set cell content and Border styles.\r\n        cellWorksheet.Cells[ "C5" ].Value = "Bottom";\r\n        cellWorksheet.Cells[ "C5" ].Style.Borders[ BorderType.Bottom ].Style = LineStyle.Double;\r\n        cellWorksheet.Cells[ "C5" ].Style.Borders[ BorderType.Bottom ].Color = Color.Red;\r\n\r\n        cellWorksheet.Cells[ "C8" ].Value = "Top";\r\n        cellWorksheet.Cells[ "C8" ].Style.Borders[ BorderType.Top ].Style = LineStyle.DashDot;\r\n\r\n        cellWorksheet.Cells[ "C11" ].Value = "Right";\r\n        cellWorksheet.Cells[ "C11" ].Style.Borders[ BorderType.Right ] = new Border() { Style = LineStyle.MediumDashed, Color = Color.Green };\r\n\r\n        cellWorksheet.Cells[ "C14" ].Value = "Left";\r\n        cellWorksheet.Cells[ "C14" ].Style.Borders[ BorderType.Left ] = new Border() { Style = LineStyle.DashDotDot, Color = Color.DarkSlateBlue };\r\n\r\n        cellWorksheet.Cells[ "C17" ].Value = "Theme Bottom";\r\n        cellWorksheet.Cells[ "C17" ].Style.Borders[ BorderType.Bottom ] = new Border() { Style = LineStyle.MediumDashDot, ThemeColor = new ThemeColor( ThemeColorType.Accent6 ) };\r\n\r\n        cellWorksheet.Cells[ "F5" ].Value = "Diagonal Down";\r\n        cellWorksheet.Cells[ "F5" ].Style.Borders[ BorderType.DiagonalDown ] = new Border() { Style = LineStyle.Dotted, Color = Color.DarkGoldenrod };\r\n\r\n        cellWorksheet.Cells[ "F8" ].Value = "Diagonal Up";\r\n        cellWorksheet.Cells[ "F8" ].Style.Borders[ BorderType.DiagonalUp ].Style = LineStyle.SlantDashDot;\r\n        cellWorksheet.Cells[ "F8" ].Style.Borders[ BorderType.DiagonalUp ].Color = Color.DarkCyan;\r\n\r\n        cellWorksheet.Cells[ "F11" ].Value = "Outside";\r\n        cellWorksheet.Cells[ "F11" ].Style.Borders.SetOutline( LineStyle.Thick, Color.Blue );\r\n\r\n        cellWorksheet.Cells[ "F14" ].Value = "Diagonals";\r\n        cellWorksheet.Cells[ "F14" ].Style.Borders.SetDiagonals( LineStyle.Hair, Color.DeepPink );\r\n\r\n        cellWorksheet.Cells[ "F17" ].Value = "Theme Outside";\r\n        cellWorksheet.Cells[ "F17" ].Style.Borders.SetThemeOutline( LineStyle.Medium, new ThemeColor( ThemeColorType.Accent2 ) );\r\n\r\n        // AutoFit column "C" and "F".\r\n        cellWorksheet.Columns[ "C" ].AutoFit();\r\n        cellWorksheet.Columns[ "F" ].AutoFit();\r\n\r\n\r\n        // Add a second worksheet for rows.\r\n        var rowWorksheet = workbook.Worksheets.Add( "Rows" );\r\n\r\n        // Set row content and borders.\r\n        rowWorksheet.Cells[ 5, 3 ].Value = "Setting row border";\r\n        rowWorksheet.Cells[ 5, 11 ].Value = "Another content";\r\n        rowWorksheet.Rows[ 5 ].Style.Borders.SetOutline( LineStyle.Thick, Color.Green );\r\n\r\n        rowWorksheet.Cells[ 8, 4 ].Value = "Setting another row border";\r\n        rowWorksheet.Cells[ 8, 12 ].Value = "Another content";\r\n        rowWorksheet.Rows[ 8 ].Style.Borders[ BorderType.Bottom ].Style = LineStyle.Double;\r\n\r\n\r\n        // Add a third worksheet for column.\r\n        var columnWorksheet = workbook.Worksheets.Add( "Columns" );\r\n\r\n        // Set column content and borders.\r\n        columnWorksheet.Cells[ 5, 5 ].Value = "Setting column border";\r\n        columnWorksheet.Cells[ 11, 5 ].Value = "Another content";\r\n        columnWorksheet.Columns[ 5 ].Style.Borders.SetOutline( LineStyle.MediumDashDot, Color.DarkOrange );\r\n\r\n        columnWorksheet.Cells[ 8, 8 ].Value = "Setting another column border";\r\n        columnWorksheet.Cells[ 11, 8 ].Value = "Another content";\r\n        columnWorksheet.Columns[ 8 ].Style.Borders[ BorderType.DiagonalDown ].Style = LineStyle.Medium;\r\n        columnWorksheet.Columns[ 8 ].Style.Borders[ BorderType.DiagonalDown ].Color = Color.Red;\r\n\r\n        // AutoFit all columns with content.\r\n        columnWorksheet.Columns.AutoFit();\r\n\r\n        // Save workbook to disk.\r\n        workbook.Save();\r\n        Console.WriteLine( "\\tCreated: SetBorders.xlsx\\n" );\r\n      }\r\n    }\n'})})]})}function h(e={}){const{wrapper:r}={...(0,l.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},28453:(e,r,o)=>{o.d(r,{R:()=>s,x:()=>d});var t=o(96540);const l={},n=t.createContext(l);function s(e){const r=t.useContext(n);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),t.createElement(n.Provider,{value:r},e.children)}}}]);