"use strict";(self.webpackChunkxceed_libs_doc=self.webpackChunkxceed_libs_doc||[]).push([[9751],{80853:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>c,toc:()=>p});var r=t(74848),o=t(28453),s=t(11470),i=t(19365);const l={},a="How to connect through an HTTP proxy server",c={id:"code-snippets/working-with-ftpclient-interface/file01",title:"How to connect through an HTTP proxy server",description:"The Proxy property and the HttpProxyClient class are used to connect to an FTP server through an HTTP proxy. Once the Proxy property has been set with an HttpProxyClient object, regular FTP operations can be performed. The Proxy property cannot be set when FtpClient is connected. Note that only HTTP proxy servers are currently supported. Furthermore, there is no need to use the proxy capabilities when connecting through a transparent proxy server.",source:"@site/ftp/code-snippets/working-with-ftpclient-interface/file01.md",sourceDirName:"code-snippets/working-with-ftpclient-interface",slug:"/code-snippets/working-with-ftpclient-interface/file01",permalink:"/xceed-libs-doc/ftp/code-snippets/working-with-ftpclient-interface/file01",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebarftp",previous:{title:"Working with the FtpClient interface",permalink:"/xceed-libs-doc/ftp/category/working-with-the-ftpclient-interface"},next:{title:"How to continue a multiple-file transfer",permalink:"/xceed-libs-doc/ftp/code-snippets/working-with-ftpclient-interface/file02"}},u={},p=[{value:"Synchronous (blocking) and asynchronous (non-blocking) demonstration using FtpClient",id:"synchronous-blocking-and-asynchronous-non-blocking-demonstration-using-ftpclient",level:2},{value:"Asynchronous (non-blocking ) demonstration using AsyncFtpClient",id:"asynchronous-non-blocking--demonstration-using-asyncftpclient",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"how-to-connect-through-an-http-proxy-server",children:"How to connect through an HTTP proxy server"})}),"\n",(0,r.jsxs)(n.p,{children:["The Proxy property and the ",(0,r.jsx)(n.code,{children:"HttpProxyClient"})," class are used to connect to an FTP server through an HTTP proxy. Once the Proxy property has been set with an ",(0,r.jsx)(n.code,{children:"HttpProxyClient"})," object, regular FTP operations can be performed. The Proxy property cannot be set when ",(0,r.jsx)(n.code,{children:"FtpClient"})," is connected. Note that only HTTP proxy servers are currently supported. Furthermore, there is no need to use the proxy capabilities when connecting through a transparent proxy server."]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["When using Xceed FTP for .NET in a WinForms application, it is recommended that a SynchronizingObject be assigned to the SynchronizingObject property of the FtpClient class to ensure that the UI remains responsive. For more information, jump to the ",(0,r.jsx)(n.a,{href:"/ftp/basic-concepts/ftp-capabilities/ftp-client-interface/winform-apps-threading",children:"WinForms applications and threading topic"}),"."]})}),"\n",(0,r.jsx)(n.h2,{id:"synchronous-blocking-and-asynchronous-non-blocking-demonstration-using-ftpclient",children:"Synchronous (blocking) and asynchronous (non-blocking) demonstration using FtpClient"}),"\n",(0,r.jsx)(n.p,{children:"The following examples show how to connect to an FTP server through an HTTP proxy server."}),"\n",(0,r.jsxs)(s.A,{children:[(0,r.jsx)(i.A,{value:"csharp",label:"C#",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'  using Xceed.Ftp;\r\n\r\n  FtpClient client = new FtpClient(); \r\n\r\n  // When using FtpClient, you can instruct\r\n  // the library to automatically redirect events on the main UI thread\r\n  // by setting the SynchronizingObject property.\r\n  client.SynchronizingObject = this;\r\n\r\n  client.Proxy = new HttpProxyClient( "192.168.0.20", 8080,\r\n                                      "proxy_user_name",\r\n                                      "proxy_user_name\'s proxy password" ); \r\n\r\n  client.Connect( "ftp.myplace.com", 21 );\r\n  client.Login( "ftp_user_name", "ftp_user_name\'s remote password");\r\n\r\n  client.ReceiveFile( "test.txt", @"d:\\new_text.txt" );\r\n  client.Disconnect();\n'})})}),(0,r.jsx)(i.A,{value:"vb.net",label:"Visual Basic .NET",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-vb.NET",children:'  Imports Xceed.Ftp\r\n\r\n  Dim client As New FtpClient() \r\n\r\n  \' When using FtpClient, you can instruct\r\n  \' the library to automatically redirect events on the main UI thread\r\n  \' by setting the SynchronizingObject property.\r\n  client.SynchronizingObject = Me\r\n\r\n  client.Proxy = new HttpProxyClient( "192.168.0.20", _\r\n                                      8080, "proxy_user_name", _\r\n                                      "proxy_user_name\'s proxy password" ) \r\n  client.Connect( "ftp.myplace.com", 21 )\r\n  client.Login( "ftp_user_name", "ftp_user_name\'s remote password")\r\n\r\n  client.ReceiveFile( "test.txt", "d:\\new_text.txt" )\r\n  client.Disconnect()\n'})})})]}),"\n",(0,r.jsx)(n.h2,{id:"asynchronous-non-blocking--demonstration-using-asyncftpclient",children:"Asynchronous (non-blocking ) demonstration using AsyncFtpClient"}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["AsyncFtpClient's methods now call the corresponding synchronous methods on a background thread. For this reason, the AsyncFtpClient class is now considered obsolete. It is therefore recommended to use FtpClient and assign a ",(0,r.jsx)(n.code,{children:"SynchronizingObject"})," to its ",(0,r.jsx)(n.code,{children:"SynchronizingObject"})," property to improve code readability."]})}),"\n",(0,r.jsx)(n.p,{children:"The following examples show how to connect to an FTP server through an HTTP proxy server."}),"\n",(0,r.jsxs)(s.A,{children:[(0,r.jsx)(i.A,{value:"csharp",label:"C#",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'    using Xceed.Ftp;\r\n    \r\n    AsyncFtpClient client = new AsyncFtpClient();\r\n    client.Proxy = new HttpProxyClient( "192.168.0.20", 8080, "proxy_user_name", "proxy_user_name\'s proxy password" );\r\n        \r\n    IAsyncResult result = client.BeginConnect( "ftp.myplace.com:21", null, null );\r\n    \r\n    while( !result.IsCompleted )\r\n      Application.DoEvents();\r\n    \r\n    client.EndConnect( result );\r\n    result = ftp.BeginLogin( "ftp_user_name", "ftp_user_name\'s remote password" );\r\n    \r\n    while( !result.IsCompleted )\r\n      Application.DoEvents();\r\n    \r\n    client.EndLogin( result );\r\n    result = client.BeginReceiveFile( "test.txt", @"d:\\new_text.txt", null, null );\r\n    \r\n    while( !result.IsCompleted )\r\n      Application.DoEvents();\r\n    \r\n    client.EndReceiveFile( result );\r\n    result = client.BeginDisconnect( null, null );\r\n    \r\n    while( !result.IsCompleted )\r\n      Application.DoEvents();\r\n    \r\n    client.EndDisconnect( result );\n'})})}),(0,r.jsx)(i.A,{value:"vb.net",label:"Visual Basic .NET",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-vb.NET",children:'  Imports Xceed.Ftp\r\n\r\n  Dim client As New AsyncFtpClient()\r\n  client.Proxy = new HttpProxyClient( "192.168.0.20", 8080, "proxy_user_name", "proxy_user_name\'s proxy password" )\r\n\r\n  Dim result As IAsyncResult\r\n  result = client.BeginConnect( "ftp.myplace.com:21", null, null )\r\n\r\n  While( !result.IsCompleted )\r\n    Application.DoEvents()\r\n  End While\r\n\r\n  client.EndConnect( result )\r\n  result = ftp.BeginLogin( "ftp_user_name", "ftp_user_name\'s remote password" )\r\n\r\n  While( !result.IsCompleted )\r\n    Application.DoEvents()\r\n  End While\r\n\r\n  client.EndLogin( result );\r\n  result = client.BeginReceiveFile( "test.txt", "d:\\new_text.txt", null, null )\r\n\r\n  While( !result.IsCompleted )\r\n    Application.DoEvents()\r\n  End While\r\n\r\n  client.EndReceiveFile( result )\r\n  result = client.BeginDisconnect( null, null )\r\n\r\n  While( !result.IsCompleted )\r\n    Application.DoEvents()\r\n  End While\r\n\r\n  client.EndDisconnect( result )\n'})})})]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},19365:(e,n,t)=>{t.d(n,{A:()=>i});t(96540);var r=t(34164);const o={tabItem:"tabItem_Ymn6"};var s=t(74848);function i(e){let{children:n,hidden:t,className:i}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,r.A)(o.tabItem,i),hidden:t,children:n})}},11470:(e,n,t)=>{t.d(n,{A:()=>j});var r=t(96540),o=t(34164),s=t(23104),i=t(56347),l=t(205),a=t(57485),c=t(31682),u=t(70679);function p(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return p(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:o}}=e;return{value:n,label:t,attributes:r,default:o}}))}(t);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function h(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const o=(0,i.W6)(),s=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,a.aZ)(s),(0,r.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(o.location.search);n.set(s,e),o.replace({...o.location,search:n.toString()})}),[s,o])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:o}=e,s=d(e),[i,a]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:s}))),[c,p]=m({queryString:t,groupId:o}),[f,y]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[o,s]=(0,u.Dv)(t);return[o,(0,r.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:o}),g=(()=>{const e=c??f;return h({value:e,tabValues:s})?e:null})();(0,l.A)((()=>{g&&a(g)}),[g]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!h({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);a(e),p(e),y(e)}),[p,y,s]),tabValues:s}}var y=t(92303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=t(74848);function x(e){let{className:n,block:t,selectedValue:r,selectValue:i,tabValues:l}=e;const a=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.a_)(),u=e=>{const n=e.currentTarget,t=a.indexOf(n),o=l[t].value;o!==r&&(c(n),i(o))},p=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=a.indexOf(e.currentTarget)+1;n=a[t]??a[0];break}case"ArrowLeft":{const t=a.indexOf(e.currentTarget)-1;n=a[t]??a[a.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":t},n),children:l.map((e=>{let{value:n,label:t,attributes:s}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>a.push(e),onKeyDown:p,onClick:u,...s,className:(0,o.A)("tabs__item",g.tabItem,s?.className,{"tabs__item--active":r===n}),children:t??n},n)}))})}function v(e){let{lazy:n,children:t,selectedValue:s}=e;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===s));return e?(0,r.cloneElement)(e,{className:(0,o.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function w(e){const n=f(e);return(0,b.jsxs)("div",{className:(0,o.A)("tabs-container",g.tabList),children:[(0,b.jsx)(x,{...n,...e}),(0,b.jsx)(v,{...n,...e})]})}function j(e){const n=(0,y.A)();return(0,b.jsx)(w,{...e,children:p(e.children)},String(n))}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var r=t(96540);const o={},s=r.createContext(o);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);