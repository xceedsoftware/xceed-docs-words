"use strict";(self.webpackChunkxceed_libs_doc=self.webpackChunkxceed_libs_doc||[]).push([[6749],{59682:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>d,toc:()=>h});var r=t(74848),o=t(28453),i=t(11470),s=t(19365);const l={},a="How to list the contents of an FTP folder",d={id:"code-snippets/working-with-ftpclient-interface/file04",title:"How to list the contents of an FTP folder",description:"The GetFolderContents and GetRawFolderContents methods of the FtpClient class as well as the BeginGetFolderContents/ EndGetFolderContents and BeginGetRawFolderContents/ EndGetRawFolderContents methods of the AsyncFtpClient class are used to list the contents of a folder on an FTP server.",source:"@site/ftp/code-snippets/working-with-ftpclient-interface/file04.md",sourceDirName:"code-snippets/working-with-ftpclient-interface",slug:"/code-snippets/working-with-ftpclient-interface/file04",permalink:"/xceed-libs-doc/ftp/code-snippets/working-with-ftpclient-interface/file04",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebarftp",previous:{title:"How to display progress information",permalink:"/xceed-libs-doc/ftp/code-snippets/working-with-ftpclient-interface/file03"},next:{title:"How to manually parse listing lines",permalink:"/xceed-libs-doc/ftp/code-snippets/working-with-ftpclient-interface/file05"}},c={},h=[{value:"Synchronous (blocking) and asynchronous (non-blocking) demonstration using FtpClient",id:"synchronous-blocking-and-asynchronous-non-blocking-demonstration-using-ftpclient",level:2},{value:"Asynchronous (non-blocking) demonstration",id:"asynchronous-non-blocking-demonstration",level:2},{value:"Things you should consider",id:"things-you-should-consider",level:2}];function p(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"how-to-list-the-contents-of-an-ftp-folder",children:"How to list the contents of an FTP folder"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"GetFolderContents"})," and ",(0,r.jsx)(n.code,{children:"GetRawFolderContents"})," methods of the FtpClient class as well as the ",(0,r.jsx)(n.code,{children:"BeginGetFolderContents"}),"/ ",(0,r.jsx)(n.code,{children:"EndGetFolderContents"})," and ",(0,r.jsx)(n.code,{children:"BeginGetRawFolderContents"}),"/ ",(0,r.jsx)(n.code,{children:"EndGetRawFolderContents"})," methods of the ",(0,r.jsx)(n.code,{children:"AsyncFtpClient"})," class are used to list the contents of a folder on an FTP server."]}),"\n",(0,r.jsxs)(n.p,{children:["All these methods retrieve the entire (or filtered) contents of the FTP server's current working folder; however, the ",(0,r.jsx)(n.code,{children:"GetFolderContents"})," and ",(0,r.jsx)(n.code,{children:"BeginGetFolderContents"}),"/",(0,r.jsx)(n.code,{children:"EndGetFolderContents"})," methods will return a collection of FtpItemInfo objects while the ",(0,r.jsx)(n.code,{children:"GetRawFolderContents"})," and ",(0,r.jsx)(n.code,{children:"BeginGetRawFolderContents"}),"/",(0,r.jsx)(n.code,{children:"EndGetRawFolderContents"})," methods will return an unprocessed, clear text list (",(0,r.jsx)(n.code,{children:"StringList"}),")."]}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsxs)(n.p,{children:["AsyncFtpClient's methods now call the corresponding synchronous methods on a background thread. For this reason, the ",(0,r.jsx)(n.code,{children:"AsyncFtpClient"})," class is now considered obsolete. It is therefore recommended to use ",(0,r.jsx)(n.code,{children:"FtpClient"})," instead to improve code readability.\r\n::"]}),(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["When using Xceed FTP for .NET in a WinForms application, it is recommended that a SynchronizingObject be assigned to the SynchronizingObject property of the ",(0,r.jsx)(n.code,{children:"FtpClient"})," class. For more information, jump to the ",(0,r.jsx)(n.a,{href:"/ftp/basic-concepts/ftp-capabilities/ftp-client-interface/winform-apps-threading",children:"WinForms applications and threading topic"}),"."]})})]}),"\n",(0,r.jsxs)(n.p,{children:["All the methods above list the files from the FTP server's current working directory. If you want to list the files from another location, you could use the ",(0,r.jsx)(n.code,{children:"ChangeCurrentFolder"})," or ",(0,r.jsx)(n.code,{children:"BeginChangeCurrentFolder"}),"/ ",(0,r.jsx)(n.code,{children:"EndChangeCurrentFolder"}),", or ",(0,r.jsx)(n.code,{children:"ChangeToParentFolder"})," or ",(0,r.jsx)(n.code,{children:"BeginChangeToParentFolder"}),"/ ",(0,r.jsx)(n.code,{children:"EndChangeToParentFolder"})," methods to change the current working folder. The current working folder can be retrieved via the ",(0,r.jsx)(n.code,{children:"GetCurrentFolder"})," or ",(0,r.jsx)(n.code,{children:"BeginGetCurrentFolder"}),"/ ",(0,r.jsx)(n.code,{children:"EndGetCurrentFolder"})," methods."]}),"\n",(0,r.jsx)(n.h2,{id:"synchronous-blocking-and-asynchronous-non-blocking-demonstration-using-ftpclient",children:"Synchronous (blocking) and asynchronous (non-blocking) demonstration using FtpClient"}),"\n",(0,r.jsx)(n.p,{children:"The following example demonstrates how to list the entire contents of an FTP server's current working folder using the GetFolderContents method and provide logging information during the process using the CommandSent and ReplyReceived events. An asynchronous (non-blocking) demonstration is also available."}),"\n",(0,r.jsxs)(i.A,{children:[(0,r.jsx)(s.A,{value:"csharp",label:"C#",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'  using Xceed.Ftp;\r\n\r\n  FtpClient ftp = new FtpClient();\r\n\r\n  // When using FtpClient, you can instruct\r\n  // the library to automatically redirect events on the main UI thread\r\n  // by setting the SynchronizingObject property.\r\n  client.SynchronizingObject = this;\r\n        \r\n  ftp.CommandSent += new CommandSentEventHandler( this.FTP_CommandSent );\r\n  ftp.ReplyReceived += new ReplyReceivedEventHandler( this.FTP_ReplyReceived );\r\n  \r\n  ftp.Connect( "localhost" );\r\n  ftp.Login();\r\n  \r\n  FtpItemInfoList items = ftp.GetFolderContents( string.Empty );\r\n  \r\n  foreach( FtpItemInfo item in items )\r\n  {\r\n    listBox1.Items.Add( item.Type.ToString() + " " + item.Name );\r\n  }\r\n  \r\n  ftp.Disconnect();\r\n  \r\n  ftp.CommandSent -= new CommandSentEventHandler( this.FTP_CommandSent );\r\n  ftp.ReplyReceived -= new ReplyReceivedEventHandler( this.FTP_ReplyReceived );\r\n  \r\n  private void FTP_CommandSent( object sender, CommandSentEventArgs e )\r\n  {\r\n    listBox1.Items.Add( ">> " + e.Command );\r\n  }\r\n  \r\n  private void FTP_ReplyReceived( object sender, ReplyReceivedEventArgs e )\r\n  {\r\n    listBox1.Items.Add( "<< " + e.Reply.ToString() );\r\n  }\n'})})}),(0,r.jsx)(s.A,{value:"vb.net",label:"Visual Basic .NET",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-vb.NET",children:'  Imports Xceed.Ftp\r\n\r\n  Dim ftp As New FtpClient()\r\n\r\n  \' When using FtpClient, you can instruct\r\n  \' the library to automatically redirect events on the main UI thread\r\n  \' by setting the SynchronizingObject property.\r\n  client.SynchronizingObject = Me\r\n\r\n  AddHandler ftp.CommandSent, AddressOf Me.FTP_CommandSent\r\n  AddHandler ftp.ReplyReceived, AddressOf Me.FTP_ReplyReceived\r\n\r\n  ftp.Connect( "localhost" )\r\n  ftp.Login()\r\n\r\n  Dim items As FtpItemInfoList = "ftp://ftp.GetFolderContents(String.Empty">ftp.GetFolderContents(String.Empty)\r\n  Dim item As FtpItemInfo\r\n\r\n  For Each item In items\r\n    ListBox1.Items.Add( item.Type.ToString() + " " + item.Name )\r\n  Next item\r\n\r\n  ftp.Disconnect()\r\n\r\n  RemoveHandler ftp.CommandSent, AddressOf Me.FTP_CommandSent\r\n  RemoveHandler ftp.ReplyReceived, AddressOf Me.FTP_ReplyReceived\r\n\r\n  Private Sub FTP_CommandSent(ByVal sender As Object, ByVal e As CommandSentEventArgs)\r\n    ListBox1.Items.Add(">> " + e.Command)\r\n  End Sub\r\n\r\n  Private Sub FTP_ReplyReceived(ByVal sender As Object, ByVal e As ReplyReceivedEventArgs)\r\n    ListBox1.Items.Add("<< " + e.Reply.ToString())\r\n  End Sub\n'})})})]}),"\n",(0,r.jsx)(n.h2,{id:"asynchronous-non-blocking-demonstration",children:"Asynchronous (non-blocking) demonstration"}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"AsyncFtpClient"}),"'s methods now call the corresponding synchronous methods on a background thread. For this reason, the ",(0,r.jsx)(n.code,{children:"AsyncFtpClient"})," class is now considered obsolete. It is therefore recommended to use FtpClient and assign a ",(0,r.jsx)(n.code,{children:"SynchronizingObject"})," to its ",(0,r.jsx)(n.code,{children:"SynchronizingObject"})," property to improve code readability."]})}),"\n",(0,r.jsx)(n.p,{children:"The following example demonstrates how to list the entire contents of an FTP server's current working folder using the GetFolderContents method and provide logging information during the process using the CommandSent and ReplyReceived events. A synchronous (blocking) demonstration is also available."}),"\n",(0,r.jsxs)(n.p,{children:['To clarify the code, instead of using callbacks, we will wait for completion of the operation before calling the matching "End" method. More information is available in the ',(0,r.jsx)(n.a,{href:"/ftp/basic-concepts/ftp-capabilities/ftp-client-interface/winform-apps-threading",children:"WinForms application and threading topic"}),"."]}),"\n",(0,r.jsxs)(i.A,{children:[(0,r.jsx)(s.A,{value:"csharp",label:"C#",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'  using Xceed.Ftp;\r\n\r\n  AsyncFtpClient ftp = new AsyncFtpClient();\r\n        \r\n  ftp.CommandSent += new CommandSentEventHandler( this.FTP_CommandSent );\r\n  ftp.ReplyReceived += new ReplyReceivedEventHandler( this.FTP_ReplyReceived );\r\n  \r\n  IAsyncResult result = ftp.BeginConnect( "localhost", null, null );\r\n  \r\n  while( !result.IsCompleted )\r\n    Application.DoEvents();\r\n  \r\n  ftp.EndConnect( result );\r\n  result = ftp.BeginLogin( null, null );\r\n  \r\n  while( !result.IsCompleted )\r\n    Application.DoEvents();\r\n  \r\n  ftp.EndLogin( result );\r\n  result = ftp.BeginGetFolderContents( string.Empty, null, null );\r\n  \r\n  while( !result.IsCompleted )\r\n    Application.DoEvents();\r\n  \r\n  FtpItemInfoList items = ftp.EndGetFolderContents( result );\r\n  \r\n  foreach( FtpItemInfo item in items )\r\n  {\r\n    listBox1.Items.Add( item.Type.ToString() + " " + item.Name );\r\n  }\r\n  \r\n  result = ftp.BeginDisconnect( null, null );\r\n  \r\n  while( !result.IsCompleted )\r\n    Application.DoEvents();\r\n  \r\n  ftp.EndDisconnect( result );\r\n  \r\n  ftp.CommandSent -= new CommandSentEventHandler( this.FTP_CommandSent );\r\n  ftp.ReplyReceived -= new ReplyReceivedEventHandler( this.FTP_ReplyReceived );\r\n  \r\n  private void FTP_CommandSent( object sender, CommandSentEventArgs e )\r\n  {\r\n    listBox1.Items.Add( ">> " + e.Command );\r\n  }\r\n  \r\n  private void FTP_ReplyReceived( object sender, ReplyReceivedEventArgs e )\r\n  {\r\n    listBox1.Items.Add( "<< " + e.Reply.ToString() );\r\n  }\n'})})}),(0,r.jsx)(s.A,{value:"vb.net",label:"Visual Basic .NET",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-vb.NET",children:'  Imports Xceed.Ftp\r\n\r\n  Dim ftp As New AsyncFtpClient()\r\n\r\n  AddHandler ftp.CommandSent, AddressOf Me.FTP_CommandSent\r\n  AddHandler ftp.ReplyReceived, AddressOf Me.FTP_ReplyReceived\r\n\r\n  Dim result As IAsyncResult = ftp.BeginConnect("localhost", Nothing, Nothing)\r\n\r\n  While Not result.IsCompleted\r\n    Application.DoEvents()\r\n  End While\r\n\r\n  ftp.EndConnect( result )\r\n  result = ftp.BeginLogin( Nothing, Nothing )\r\n\r\n  While Not result.IsCompleted\r\n    Application.DoEvents()\r\n  End While\r\n\r\n  ftp.EndLogin( result )\r\n  result = ftp.BeginGetFolderContents( string.Empty, Nothing, Nothing )\r\n\r\n  While Not result.IsCompleted\r\n    Application.DoEvents()\r\n  End While\r\n\r\n  Dim items As FtpItemInfoList = ftp.EndGetFolderContents(result)\r\n  Dim item As FtpItemInfo\r\n\r\n  For Each item In items\r\n    ListBox1.Items.Add( item.Type.ToString() + " " + item.Name )\r\n  Next item\r\n\r\n  result = ftp.BeginDisconnect( Nothing, Nothing )\r\n\r\n  While Not result.IsCompleted\r\n    Application.DoEvents()\r\n  End While\r\n\r\n  ftp.EndDisconnect( result )\r\n\r\n  RemoveHandler ftp.CommandSent, AddressOf Me.FTP_CommandSent\r\n  RemoveHandler ftp.ReplyReceived, AddressOf Me.FTP_ReplyReceived\r\n\r\n  Private Sub FTP_CommandSent(ByVal sender As Object, ByVal e As CommandSentEventArgs)\r\n    ListBox1.Items.Add(">> " + e.Command)\r\n  End Sub\r\n\r\n  Private Sub FTP_ReplyReceived(ByVal sender As Object, ByVal e As ReplyReceivedEventArgs)\r\n    ListBox1.Items.Add("<< " + e.Reply.ToString())\r\n  End Sub\n'})})})]}),"\n",(0,r.jsx)(n.h2,{id:"things-you-should-consider",children:"Things you should consider"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Are you using Xceed FTP for .NET in a WinForms application? Use the AsyncFtpClient class rather than the ",(0,r.jsx)(n.code,{children:"FtpClient"})," class."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Do you want the FTP server to initiate the data connection rather than the FTP client? Set the ",(0,r.jsx)(n.code,{children:"PassiveTransfer"})," property to false."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Do you want to decrease or increase the period of time after which an FTP operation should timeout? Change the value of the ",(0,r.jsx)(n.code,{children:"Timeout"})," property."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Do you want to create a log file of the FTP process? Set the ",(0,r.jsx)(n.code,{children:"TraceWriter"})," property."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Do you want to know the state of the FTP client? Check the Connected and Busy properties. You can also check the State property for specific state information."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Do you want to know when a file's information is being listed/parsed and/or manually parse the listing? Handle the ",(0,r.jsx)(n.code,{children:"ParsingListingLine"})," event. The ",(0,r.jsx)(n.code,{children:"ParsingListingLine"})," event will not be raised by the ",(0,r.jsx)(n.code,{children:"GetRawFolderContents"})," method."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Do you want to display progress information? Handle the ",(0,r.jsx)(n.code,{children:"FileTransferStatus"})," event."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Do you want to abort the FTP operation? Call the ",(0,r.jsx)(n.code,{children:"Abort"})," method."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Do you want to prevent routers from prematurely closing the command channel while a long data transfer is taking place. Set the ",(0,r.jsx)(n.code,{children:"KeepAliveInterval"})," property."]}),"\n"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},19365:(e,n,t)=>{t.d(n,{A:()=>s});t(96540);var r=t(34164);const o={tabItem:"tabItem_Ymn6"};var i=t(74848);function s(e){let{children:n,hidden:t,className:s}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,r.A)(o.tabItem,s),hidden:t,children:n})}},11470:(e,n,t)=>{t.d(n,{A:()=>F});var r=t(96540),o=t(34164),i=t(23104),s=t(56347),l=t(205),a=t(57485),d=t(31682),c=t(70679);function h(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:o}}=e;return{value:n,label:t,attributes:r,default:o}}))}(t);return function(e){const n=(0,d.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function u(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const o=(0,s.W6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,a.aZ)(i),(0,r.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(o.location.search);n.set(i,e),o.replace({...o.location,search:n.toString()})}),[i,o])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:o}=e,i=p(e),[s,a]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!u({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:i}))),[d,h]=m({queryString:t,groupId:o}),[f,g]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[o,i]=(0,c.Dv)(t);return[o,(0,r.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:o}),v=(()=>{const e=d??f;return u({value:e,tabValues:i})?e:null})();(0,l.A)((()=>{v&&a(v)}),[v]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!u({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);a(e),h(e),g(e)}),[h,g,i]),tabValues:i}}var g=t(92303);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=t(74848);function b(e){let{className:n,block:t,selectedValue:r,selectValue:s,tabValues:l}=e;const a=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.a_)(),c=e=>{const n=e.currentTarget,t=a.indexOf(n),o=l[t].value;o!==r&&(d(n),s(o))},h=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=a.indexOf(e.currentTarget)+1;n=a[t]??a[0];break}case"ArrowLeft":{const t=a.indexOf(e.currentTarget)-1;n=a[t]??a[a.length-1];break}}n?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":t},n),children:l.map((e=>{let{value:n,label:t,attributes:i}=e;return(0,y.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>a.push(e),onKeyDown:h,onClick:c,...i,className:(0,o.A)("tabs__item",v.tabItem,i?.className,{"tabs__item--active":r===n}),children:t??n},n)}))})}function x(e){let{lazy:n,children:t,selectedValue:i}=e;const s=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===i));return e?(0,r.cloneElement)(e,{className:(0,o.A)("margin-top--md",e.props.className)}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function C(e){const n=f(e);return(0,y.jsxs)("div",{className:(0,o.A)("tabs-container",v.tabList),children:[(0,y.jsx)(b,{...n,...e}),(0,y.jsx)(x,{...n,...e})]})}function F(e){const n=(0,g.A)();return(0,y.jsx)(C,{...e,children:h(e.children)},String(n))}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var r=t(96540);const o={},i=r.createContext(o);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);