"use strict";(self.webpackChunkxceed_docs_words=self.webpackChunkxceed_docs_words||[]).push([[2504],{65562:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var o=t(74848),n=t(28453);const s={},a="Import collections",i={id:"code-snippets/import-data/import-collections",title:"Import collections",description:"This example demonstrates how to import collections when using the API from the Xceed Workbooks for .NET.",source:"@site/workbooks/code-snippets/import-data/import-collections.md",sourceDirName:"code-snippets/import-data",slug:"/code-snippets/import-data/import-collections",permalink:"/xceed-libs-doc/workbooks/code-snippets/import-data/import-collections",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebarsworkbooks",previous:{title:"Import arrays",permalink:"/xceed-libs-doc/workbooks/code-snippets/import-data/import-arrays"},next:{title:"Import CSV",permalink:"/xceed-libs-doc/workbooks/code-snippets/import-data/import-csv"}},l={},c=[];function m(e){const r={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"import-collections",children:"Import collections"})}),"\n",(0,o.jsx)(r.p,{children:"This example demonstrates how to import collections when using the API from the Xceed Workbooks for .NET."}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-csharp",children:'    public static void ImportCollections()\r\n    {\r\n      using( var workbook = Workbook.Create( "ImportCollections.xlsx" ) )\r\n      {\r\n        // Get the first worksheet. A workbook contains at least 1 worksheet.\r\n        var worksheet = workbook.Worksheets[ 0 ];\r\n\r\n        // Add a title.\r\n        worksheet.Cells[ "B1" ].Value = "Import Collections";\r\n        worksheet.Cells[ "B1" ].Style.Font = new Font() { Bold = true, Size = 15.5d };\r\n\r\n        worksheet.Cells[ "B4" ].Value = "Import a vertical list of strings:";\r\n        worksheet.Cells[ "B4" ].Style.Font.Color = Color.Blue;\r\n\r\n        // Define a list of strings, the import options(vertical by default) and call the ImportData function.\r\n        var stringData = new List<string>() { "First", "Second", "Third", "Fourth" };\r\n        var stringImportOptions = new ImportOptions() { DestinationTopLeftAddress = "B5" };\r\n        worksheet.ImportData( stringData, stringImportOptions );\r\n\r\n\r\n        worksheet.Cells[ "H4" ].Value = "Import a vertical List of Players:";\r\n        worksheet.Cells[ "H4" ].Style.Font.Color = Color.Blue;\r\n\r\n        // Define a list of user objects, the import options(vertical by default, specify PropertyNames and show propertyNames) and call the ImportData function.\r\n        var userObjectData = new List<Player>()\r\n        {\r\n          new Player() { Name = "Tom Sawyer", Team = Team.Miami_Ducks, Number = 9 },\r\n          new Player() { Name = "Mike Smith", Team = Team.Chicago_Hornets, Number = 18 },\r\n          new Player() { Name = "Kelly Tomson", Team = Team.LosAngelese_Raiders, Number = 33 },\r\n          new Player() { Name = "John Graham", Team = Team.NewYork_Bucs, Number = 7 },\r\n        };\r\n        var userObjectImportOptions = new UserObjectImportOptions() { DestinationTopLeftAddress = "H5", PropertyNames = new string[] { "Name", "Team" }, IsPropertyNamesShown = true };\r\n        worksheet.ImportData( userObjectData, userObjectImportOptions );\r\n\r\n\r\n        worksheet.Cells[ 13, 1 ].Value = "Import an horizontal ObservableCollection of int:";\r\n        worksheet.Cells[ 13, 1 ].Style.Font.Color = Color.Blue;\r\n\r\n        // Define a list of ints, the import options and call the ImportData function.\r\n        var intData = new List<int>() { 1, 2, 3, 4, 5 };\r\n        var intImportOptions = new ImportOptions() { DestinationRowId = 14, DestinationColumnId = 1, IsLinearDataVertical = false };\r\n        worksheet.ImportData( intData, intImportOptions );\r\n\r\n\r\n        worksheet.Cells[ "M4" ].Value = "Import a vertical Dictionary of Players:";\r\n        worksheet.Cells[ "M4" ].Style.Font.Color = Color.Blue;\r\n\r\n        // Define a Dictionary of Players, the import options and call the ImportData function.\r\n        var dictionaryData = new Dictionary<int, Player>()\r\n        {\r\n          { 1, new Player() { Name = "Tom Sawyer", Team = Team.Miami_Ducks, Number = 9 } },\r\n          { 2, new Player() { Name = "Mike Smith", Team = Team.Chicago_Hornets, Number = 18 } },\r\n          { 3, new Player() { Name = "Kelly Tomson", Team = Team.LosAngelese_Raiders, Number = 33 } },\r\n          { 4, new Player() { Name = "John Graham", Team = Team.NewYork_Bucs, Number = 7 } },\r\n        };\r\n        var dictionaryImportOptions = new UserObjectImportOptions() { DestinationTopLeftAddress = "M5" };\r\n        worksheet.ImportData( dictionaryData, dictionaryImportOptions );\r\n\r\n        // AutoFit all columns, starting at row 4 up to row 10 (rowId starts at 0), with column sizes from 0 to 255.\r\n        worksheet.Columns.AutoFit( 0, 255, 4, 10 );\r\n\r\n        // Save workbook to disk.\r\n        workbook.Save();\r\n        Console.WriteLine( "\\tCreated: ImportCollections.xslx\\n" );\r\n      }\r\n    }\r\n\r\n    private enum Team\r\n    {\r\n      Chicago_Hornets,\r\n      Miami_Ducks,\r\n      NewYork_Bucs,\r\n      LosAngelese_Raiders\r\n    }   \r\n\r\n    private class Player\r\n    {\r\n      public string Name { get; set; }\r\n\r\n      public int Number { get; set; }\r\n\r\n      public Team Team { get; set; }\r\n    }\r\n\n'})})]})}function p(e={}){const{wrapper:r}={...(0,n.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}},28453:(e,r,t)=>{t.d(r,{R:()=>a,x:()=>i});var o=t(96540);const n={},s=o.createContext(n);function a(e){const r=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),o.createElement(s.Provider,{value:r},e.children)}}}]);