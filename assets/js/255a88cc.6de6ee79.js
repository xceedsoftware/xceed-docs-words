"use strict";(self.webpackChunkxceed_libs_doc=self.webpackChunkxceed_libs_doc||[]).push([[8728],{84637:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>i,contentTitle:()=>a,default:()=>b,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var n=t(74848),r=t(28453);const s={},a="Remove tables",l={id:"code-snippets/table/remove-tables",title:"Remove tables",description:"This example demonstrates how to remove tables when using the API from the Xceed Workbooks for .NET.",source:"@site/workbooks/code-snippets/table/remove-tables.md",sourceDirName:"code-snippets/table",slug:"/code-snippets/table/remove-tables",permalink:"/xceed-libs-doc/workbooks/code-snippets/table/remove-tables",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebarsworkbooks",previous:{title:"Add Formatted table",permalink:"/xceed-libs-doc/workbooks/code-snippets/table/add-formatted-table"},next:{title:"Annotations",permalink:"/xceed-libs-doc/workbooks/category/annotations"}},i={},c=[];function d(e){const o={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(o.header,{children:(0,n.jsx)(o.h1,{id:"remove-tables",children:"Remove tables"})}),"\n",(0,n.jsx)(o.p,{children:"This example demonstrates how to remove tables when using the API from the Xceed Workbooks for .NET."}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-csharp",children:'    public static void RemoveTables()\r\n    {\r\n      using( var workbook = Workbook.Load( "Tables.xlsx" ) )\r\n      {\r\n        // Get the first worksheet. A workbook contains at least 1 worksheet.\r\n        var worksheet = workbook.Worksheets[ 0 ];\r\n\r\n        // Modify the title.\r\n        worksheet.Cells[ "B1" ].Value = "Remove Tables";\r\n\r\n        // Remove Table at index 1.\r\n        worksheet.Tables.RemoveAt( 1 );\r\n        worksheet.Cells[ "L4" ].Value = "The table has been removed.";\r\n\r\n        // Remove Table named "Table4".\r\n        worksheet.Tables.Remove( "Table4" );\r\n        worksheet.Cells[ "L32" ].Value = "The table has been removed.";\r\n\r\n        // Set horizontal alignment of column "L" to Left.\r\n        worksheet.Columns[ "L" ].Style.Alignment.Horizontal = HorizontalAlignment.Left;\r\n\r\n        // Save workbook to disk.\r\n        workbook.SaveAs( "RemoveTables.xlsx" );\r\n        Console.WriteLine( "\\tCreated: RemoveTables.xlsx\\n" );\r\n      }\r\n    }\n'})})]})}function b(e={}){const{wrapper:o}={...(0,r.R)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},28453:(e,o,t)=>{t.d(o,{R:()=>a,x:()=>l});var n=t(96540);const r={},s=n.createContext(r);function a(e){const o=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function l(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(s.Provider,{value:o},e.children)}}}]);