"use strict";(self.webpackChunkxceed_libs_doc=self.webpackChunkxceed_libs_doc||[]).push([[9816],{78652:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>u});var r=t(74848),i=t(28453),o=t(11470),s=t(19365);const a={},l="Obtaining the server public key fingerprint",c={id:"code-snippets/sftp-capabilities/file04",title:"Obtaining the server public key fingerprint",description:"During the connection sequence to a SSH server, the server sends its public key for authentication by the client. By default, the component accepts the public key received and the connection sequence moves to its next step.",source:"@site/ftp/code-snippets/sftp-capabilities/file04.md",sourceDirName:"code-snippets/sftp-capabilities",slug:"/code-snippets/sftp-capabilities/file04",permalink:"/xceed-libs-doc/ftp/code-snippets/sftp-capabilities/file04",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebarftp",previous:{title:"Handling File Sharing Issues",permalink:"/xceed-libs-doc/ftp/code-snippets/sftp-capabilities/file03"},next:{title:"QuickFtp class",permalink:"/xceed-libs-doc/ftp/basic-concepts/quick-ftp-class"}},h={},u=[{value:"When reading files",id:"when-reading-files",level:3},{value:"Example",id:"example",level:3}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"obtaining-the-server-public-key-fingerprint",children:"Obtaining the server public key fingerprint"})}),"\n",(0,r.jsx)(n.p,{children:"During the connection sequence to a SSH server, the server sends its public key for authentication by the client. By default, the component accepts the public key received and the connection sequence moves to its next step."}),"\n",(0,r.jsx)(n.p,{children:"It is possible for an application to be notified when the server's public key is received and authenticate the key using whatever method is appropriate for the application (e.g., using certificates or a local database, etc)."}),"\n",(0,r.jsx)(n.p,{children:"SSHClient's HostKeyReceived event governs this functionality. The event is triggered during connection sequence to a SSH server when the server's public key is received for authentication. The event arguments contain the server's public key. The key is available as an MD5 fingerprint or as the raw byte array. An application that subscribes to the event can accept or reject the key with the AcceptHostKey property."}),"\n",(0,r.jsxs)(o.A,{children:[(0,r.jsx)(s.A,{value:"csharp",label:"C#",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'    using Xceed.SSH.Client;\r\n    using Xceed.SSH.Core;\r\n    using Xceed.SSH.Protocols;\r\n    using Xceed.FileSystem;\r\n\r\n    namespace DocumentationExamples.SSH\r\n    {\r\n      class PublicKeyFingerprint1\r\n      {\r\n        private static void OnHostKeyReceived( object sender, HostKeyReceivedEventArgs e )\r\n        {\r\n          /* The server\'s fingerprint is available as both a both array or a string */\r\n          byte[] hostKeyMD5Fingerprint = e.HostKeyMD5Fingerprint;\r\n          string hostKeyMD5FingerprintString = e.HostKeyMD5FingerprintString;\r\n\r\n          /* TODO: Perform your fingerprint validation... */\r\n\r\n          /* We can choose to accept or reject the server\'s key. Here we accept. */\r\n          e.AcceptHostKey = true;\r\n        }\r\n\r\n        static void Example()\r\n        {\r\n          string host = "sftptest.dreamhosters.com";\r\n          string username = "snippet_sftp";\r\n          string password = "9MNfGgSx";\r\n\r\n          SSHClient ssh = new SSHClient();\r\n\r\n          // Ask to be notified when we receive the server\'s key and other information\r\n          ssh.HostKeyReceived += OnHostKeyReceived;\r\n\r\n          try\r\n          {\r\n            ssh.Connect( host );\r\n          }\r\n          // These exception can be thrown by a call to Connect()\r\n          catch( SSHIdentificationStringException )\r\n          {\r\n            // This means the component was unable to identify the server as a SSH server\r\n            throw;\r\n          }\r\n          catch( SSHKeyExchangeException )\r\n          {\r\n            // This means the client and the server failed to negotiate terms for a connection\r\n            // This usually indicates an interoperability problem with certain old or broken servers\r\n            throw;\r\n          }\r\n          catch( UnsupportedSSHProtocolException )\r\n          {\r\n            // This means the server is using a version of the SSH protocol that is not supported.\r\n            throw;\r\n          }\r\n          catch( SSHTimeoutException )\r\n          {\r\n            // This means the client did not receive a response from the server within the required\r\n            // time. This usually indicate a problem with the Internet connection or an interoperability\r\n            // problem between the server and the client.\r\n            throw;\r\n          }\r\n\r\n          try\r\n          {\r\n            try\r\n            {\r\n              ssh.Authenticate( username, password );\r\n\r\n              /* ... */\r\n            }\r\n            // These exceptions can be thrown by a call to Authenticate()\r\n            catch( SSHIncorrectPasswordException )\r\n            {\r\n              // This means the authentication method is supported by the server but the password\r\n              // was incorrect for the specified username \r\n              throw;\r\n            }\r\n            catch( SSHAuthenticationPartialSuccessException )\r\n            {\r\n              // This means the authentication was successful but the server requires an additional authentication\r\n              // using another method specified in the exception information\r\n              throw;\r\n            }\r\n            catch( SSHUnsupportedAuthenticationMethodException )\r\n            {\r\n              // This means the authentication method is not supported by the server\r\n              throw;\r\n            }\r\n            catch( SSHAuthenticationFailedException )\r\n            {\r\n              // This means the authentication method failed\r\n              throw;\r\n            }\r\n          }\r\n          finally\r\n          {\r\n            // Always make sure to disconnect from the server when the connection is no longer needed\r\n            ssh.Disconnect();\r\n          }\r\n        }\r\n      }\r\n    }\n'})})}),(0,r.jsx)(s.A,{value:"vb.net",label:"Visual Basic .NET",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-vb.NET",children:"  Imports Xceed.SSH.Client\r\n  Imports Xceed.SSH.Core\r\n  Imports Xceed.SSH.Protocols\r\n  Imports Xceed.FileSystem\r\n\r\n  Namespace DocumentationExamples.SSH\r\n    Friend Class PublicKeyFingerprint1\r\n      Private Shared Sub OnHostKeyReceived(ByVal sender As Object, ByVal e As HostKeyReceivedEventArgs)\r\n        ' The server's fingerprint is available as both a both array or a string \r\n        Dim hostKeyMD5Fingerprint() As Byte = e.HostKeyMD5Fingerprint\r\n        Dim hostKeyMD5FingerprintString As String = e.HostKeyMD5FingerprintString\r\n\r\n        ' TODO: Perform your fingerprint validation... \r\n\r\n        ' We can choose to accept or reject the server's key. Here we accept. \r\n        e.AcceptHostKey = True\r\n      End Sub\r\n\r\n      Private Shared Sub Example()\r\n        Dim host As String = \"sftptest.dreamhosters.com\"\r\n        Dim username As String = \"snippet_sftp\"\r\n        Dim password As String = \"9MNfGgSx\"\r\n\r\n        Dim ssh As New SSHClient()\r\n\r\n        ' Ask to be notified when we receive the server's key and other information\r\n        AddHandler ssh.HostKeyReceived, AddressOf OnHostKeyReceived\r\n\r\n        Try\r\n          ssh.Connect(host)\r\n        ' These exception can be thrown by a call to Connect()\r\n        Catch e1 As SSHIdentificationStringException\r\n          ' This means the component was unable to identify the server as a SSH server\r\n          Throw\r\n        Catch e2 As SSHKeyExchangeException\r\n          ' This means the client and the server failed to negotiate terms for a connection\r\n          ' This usually indicates an interoperability problem with certain old or broken servers\r\n          Throw\r\n        Catch e3 As UnsupportedSSHProtocolException\r\n          ' This means the server is using a version of the SSH protocol that is not supported.\r\n          Throw\r\n        Catch e4 As SSHTimeoutException\r\n          ' This means the client did not receive a response from the server within the required\r\n          ' time. This usually indicate a problem with the Internet connection or an interoperability\r\n          ' problem between the server and the client.\r\n          Throw\r\n        End Try\r\n\r\n        Try\r\n          Try\r\n            ssh.Authenticate(username, password)\r\n\r\n            '... \r\n          ' These exceptions can be thrown by a call to Authenticate()\r\n          Catch e5 As SSHIncorrectPasswordException\r\n            ' This means the authentication method is supported by the server but the password\r\n            ' was incorrect for the specified username \r\n            Throw\r\n          Catch e6 As SSHAuthenticationPartialSuccessException\r\n            ' This means the authentication was successful but the server requires an additional authentication\r\n            ' using another method specified in the exception information\r\n            Throw\r\n          Catch e7 As SSHUnsupportedAuthenticationMethodException\r\n            ' This means the authentication method is not supported by the server\r\n            Throw\r\n          Catch e8 As SSHAuthenticationFailedException\r\n            ' This means the authentication method failed\r\n            Throw\r\n          End Try\r\n        Finally\r\n          ' Always make sure to disconnect from the server when the connection is no longer needed\r\n          ssh.Disconnect()\r\n        End Try\r\n      End Sub\r\n    End Class\r\n  End Namespace\n"})})})]}),"\n",(0,r.jsx)(n.h3,{id:"when-reading-files",children:"When reading files"}),"\n",(0,r.jsxs)(n.p,{children:["Downloading opens SFtp remote files for reading and so uses the ",(0,r.jsx)(n.code,{children:"SFtpFile.DefaultAutomaticReadFileShare"})," property value."]}),"\n",(0,r.jsxs)(n.p,{children:["If supported by the server, it is best practice to enable blocking for writing and deleting when opening a file for reading. This way, it can be guaranteed that only a single process can write to a file at the same time but allow for any number of processes to read from the file at the same time. This is done by setting the SFtpFile.",(0,r.jsx)(n.code,{children:"DefaultAutomaticReadFileShare"})," property to %FileShare.Read",":System",".IO.FileShareFileShare%."]}),"\n",(0,r.jsxs)(n.p,{children:["The default automatic FileShare can be returned to its default value by calling the ",(0,r.jsx)(n.code,{children:"SFtpFile.SetDefaultAutomaticReadFileShare"})," method with null."]}),"\n",(0,r.jsxs)(o.A,{children:[(0,r.jsx)(s.A,{value:"csharp",label:"C#",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"    // Set the read file share to allow reading but block writing and deleting by other processes when reading files\r\n    SFtpFile.SetDefaultAutomaticReadFileShare( FileShare.Read );\r\n\r\n    // Downloading opens SFtp remote files for reading and so uses the DefaultAutomaticReadFileShare property value\r\n    remoteFolder.CopyFilesTo( localFolder, true, true );\n"})})}),(0,r.jsx)(s.A,{value:"vb.net",label:"Visual Basic .NET",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-vb.NET",children:"  ' Set the read file share to allow reading but block writing and deleting by other processes when reading files\r\n  SFtpFile.SetDefaultAutomaticReadFileShare(FileShare.Read)\r\n\r\n  ' Downloading opens SFtp remote files for reading and so uses the DefaultAutomaticReadFileShare property value\r\n  remoteFolder.CopyFilesTo(localFolder, True, True)\n"})})})]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"It is not necessary to test which version of the SFtp protocol is in use to change the FileShare options. If the protocol version does not support the FileShare options, the values are silently ignored."})}),"\n",(0,r.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.p,{children:"The following example shows how to change the default FileShare option values. It also shows what happens when a FileShare value isn't supported by the SFtp server and what an application can do to remedy the situation."}),"\n",(0,r.jsxs)(o.A,{children:[(0,r.jsx)(s.A,{value:"csharp",label:"C#",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'    void Example()\r\n    {\r\n      using( SSHClient ssh = new SSHClient() )\r\n      {\r\n        ssh.Connect( host );\r\n        ssh.Authenticate( username, password );\r\n\r\n        using( SFtpSession sftp = new SFtpSession( ssh ) )\r\n        {\r\n          /* FileShare options are only supported in versions 5 and later of the SFtp protocol.\r\n          When lower versions are used, like the very common version 3, the FileShare values\r\n          used by SFtpFile and silently not used when opening remote files. */\r\n\r\n          // If the SFtp server run version 5 or later of the SFtp protocol\r\n          if( sftp.SFtpServerProtocolVersion >= 5 )\r\n          {\r\n            /* In this example, we test the protocol version number, but this is only done to\r\n            show you can. FileShare values are simply ignored when the protocol version\r\n            does not support them. */\r\n          }\r\n\r\n          // Set the write file share to block reading, writing and deleting by other processes when writing files\r\n          SFtpFile.SetDefaultAutomaticWriteFileShare( FileShare.None );\r\n\r\n          // Set the read file share to allow reading but block writing and deleting by other processes when reading files\r\n          SFtpFile.SetDefaultAutomaticReadFileShare( FileShare.Read );\r\n\r\n          AbstractFolder sourceFolder = new DiskFolder( @"D:\\SomeFolder" );\r\n          AbstractFolder destinationFolder = new SFtpFolder( sftp );\r\n\r\n          FileSystemEvents events = new FileSystemEvents();\r\n          \r\n          // Handle the ItemException event to handle issues with file sharing\r\n          events.ItemException += new ItemExceptionEventHandler( OnItemException );\r\n\r\n          /* We will upload files here. Uploading opens SFtp remote files for writing\r\n          and so uses the DefaultAutomaticWriteFileShare property value. */\r\n\r\n          // Upload the contents of the local folder to the SFtp server\r\n          sourceFolder.CopyFilesTo( events, null, destinationFolder, true, true );\r\n        }\r\n      }\r\n    }\r\n\r\n    static void OnItemException( object sender, ItemExceptionEventArgs e )\r\n    {\r\n      // Express the exception as a UnsupportedFileLockException object\r\n      UnsupportedFileLockException unsupportedFileLockException = e.Exception as UnsupportedFileLockException;\r\n\r\n      // If we did indeed get a UnsupportedFileLockException\r\n      if( unsupportedFileLockException != null )\r\n      {\r\n        /* The SFtp server cannot make the locking guarantee for the FileShare value used\r\n        in the operation. */\r\n\r\n        // The exception message contains the FileShare value used that is not supported\r\n        Console.WriteLine( unsupportedFileLockException.Message );\r\n\r\n        // The FileShare value can be found in the FileShare property of the exception\r\n        Console.WriteLine( "FileShare value used that is not supported: {0}", unsupportedFileLockException.FileShare );\r\n\r\n        /* You can always revert to the default FileShare behavior which does not ask to lock the file */\r\n\r\n        // Revert to the default write file share value\r\n        SFtpFile.SetDefaultAutomaticWriteFileShare( null );\r\n\r\n        // Revert to the default read file share value\r\n        SFtpFile.SetDefaultAutomaticReadFileShare( null );\r\n\r\n        // Retry the operation\r\n        e.Action = ItemExceptionAction.Retry;\r\n      }\r\n    }\n'})})}),(0,r.jsx)(s.A,{value:"vb.net",label:"Visual Basic .NET",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-vb.NET",children:" Private Sub Example()\r\n    Using ssh As New SSHClient()\r\n      ssh.Connect(host)\r\n      ssh.Authenticate(username, password)\r\n\r\n      Using sftp As New SFtpSession(ssh)\r\n'           FileShare options are only supported in versions 5 and later of the SFtp protocol.\r\n'          When lower versions are used, like the very common version 3, the FileShare values\r\n'          used by SFtpFile and silently not used when opening remote files. \r\n\r\n        ' If the SFtp server run version 5 or later of the SFtp protocol\r\n        If sftp.SFtpServerProtocolVersion >= 5 Then\r\n'             In this example, we test the protocol version number, but this is only done to\r\n'            show you can. FileShare values are simply ignored when the protocol version\r\n'            does not support them. \r\n        End If\r\n\r\n        ' Set the write file share to block reading, writing and deleting by other processes when writing files\r\n        SFtpFile.SetDefaultAutomaticWriteFileShare(FileShare.None)\r\n\r\n        ' Set the read file share to allow reading but block writing and deleting by other processes when reading files\r\n        SFtpFile.SetDefaultAutomaticReadFileShare(FileShare.Read)\r\n\r\n        Dim sourceFolder As AbstractFolder = New DiskFolder(\"D:\\SomeFolder\")\r\n        Dim destinationFolder As AbstractFolder = New SFtpFolder(sftp)\r\n\r\n        Dim events As New FileSystemEvents()\r\n\r\n        ' Handle the ItemException event to handle issues with file sharing\r\n        AddHandler events.ItemException, AddressOf OnItemException\r\n\r\n'           We will upload files here. Uploading opens SFtp remote files for writing\r\n'          and so uses the DefaultAutomaticWriteFileShare property value. \r\n\r\n        ' Upload the contents of the local folder to the SFtp server\r\n        sourceFolder.CopyFilesTo(events, Nothing, destinationFolder, True, True)\r\n      End Using\r\n    End Using\r\n  End Sub\r\n\r\n  Private Shared Sub OnItemException(ByVal sender As Object, ByVal e As ItemExceptionEventArgs)\r\n    ' Express the exception as a UnsupportedFileLockException object\r\n    Dim unsupportedFileLockException As UnsupportedFileLockException = TryCast(e.Exception, UnsupportedFileLockException)\r\n\r\n    ' If we did indeed get a UnsupportedFileLockException\r\n    If unsupportedFileLockException IsNot Nothing Then\r\n'         The SFtp server cannot make the locking guarantee for the FileShare value used\r\n'        in the operation. \r\n\r\n      ' The exception message contains the FileShare value used that is not supported\r\n      Console.WriteLine(unsupportedFileLockException.Message)\r\n\r\n      ' The FileShare value can be found in the FileShare property of the exception\r\n      Console.WriteLine(\"FileShare value used that is not supported: {0}\", unsupportedFileLockException.FileShare)\r\n\r\n      ' You can always revert to the default FileShare behavior which does not ask to lock the file \r\n\r\n      ' Revert to the default write file share value\r\n      SFtpFile.SetDefaultAutomaticWriteFileShare(Nothing)\r\n\r\n      ' Revert to the default read file share value\r\n      SFtpFile.SetDefaultAutomaticReadFileShare(Nothing)\r\n\r\n      ' Retry the operation\r\n      e.Action = ItemExceptionAction.Retry\r\n    End If\r\n  End Sub\n"})})})]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},19365:(e,n,t)=>{t.d(n,{A:()=>s});t(96540);var r=t(34164);const i={tabItem:"tabItem_Ymn6"};var o=t(74848);function s(e){let{children:n,hidden:t,className:s}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,r.A)(i.tabItem,s),hidden:t,children:n})}},11470:(e,n,t)=>{t.d(n,{A:()=>w});var r=t(96540),i=t(34164),o=t(23104),s=t(56347),a=t(205),l=t(57485),c=t(31682),h=t(70679);function u(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:i}}=e;return{value:n,label:t,attributes:r,default:i}}))}(t);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function f(e){let{queryString:n=!1,groupId:t}=e;const i=(0,s.W6)(),o=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l.aZ)(o),(0,r.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(i.location.search);n.set(o,e),i.replace({...i.location,search:n.toString()})}),[o,i])]}function m(e){const{defaultValue:n,queryString:t=!1,groupId:i}=e,o=d(e),[s,l]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:o}))),[c,u]=f({queryString:t,groupId:i}),[m,S]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,o]=(0,h.Dv)(t);return[i,(0,r.useCallback)((e=>{t&&o.set(e)}),[t,o])]}({groupId:i}),v=(()=>{const e=c??m;return p({value:e,tabValues:o})?e:null})();(0,a.A)((()=>{v&&l(v)}),[v]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),S(e)}),[u,S,o]),tabValues:o}}var S=t(92303);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=t(74848);function g(e){let{className:n,block:t,selectedValue:r,selectValue:s,tabValues:a}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.a_)(),h=e=>{const n=e.currentTarget,t=l.indexOf(n),i=a[t].value;i!==r&&(c(n),s(i))},u=e=>{let n=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":t},n),children:a.map((e=>{let{value:n,label:t,attributes:o}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>l.push(e),onKeyDown:u,onClick:h,...o,className:(0,i.A)("tabs__item",v.tabItem,o?.className,{"tabs__item--active":r===n}),children:t??n},n)}))})}function y(e){let{lazy:n,children:t,selectedValue:o}=e;const s=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===o));return e?(0,r.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==o})))})}function F(e){const n=m(e);return(0,b.jsxs)("div",{className:(0,i.A)("tabs-container",v.tabList),children:[(0,b.jsx)(g,{...n,...e}),(0,b.jsx)(y,{...n,...e})]})}function w(e){const n=(0,S.A)();return(0,b.jsx)(F,{...e,children:u(e.children)},String(n))}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var r=t(96540);const i={},o=r.createContext(i);function s(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);