"use strict";(self.webpackChunkxceed_docs_words=self.webpackChunkxceed_docs_words||[]).push([[7453],{53040:(o,e,r)=>{r.r(e),r.d(e,{assets:()=>i,contentTitle:()=>a,default:()=>c,frontMatter:()=>n,metadata:()=>k,toc:()=>d});var t=r(74848),s=r(28453);const n={},a="Load Workbook with stream",k={id:"code-snippets/workbook/load-workbook-with-stream",title:"Load Workbook with stream",description:"This example demonstrates how to load workbook with stream when using the API from the Xceed Workbooks for .NET.",source:"@site/workbooks/code-snippets/workbook/load-workbook-with-stream.md",sourceDirName:"code-snippets/workbook",slug:"/code-snippets/workbook/load-workbook-with-stream",permalink:"/xceed-libs-doc/workbooks/code-snippets/workbook/load-workbook-with-stream",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebarsworkbooks",previous:{title:"Load Workbook with filename",permalink:"/xceed-libs-doc/workbooks/code-snippets/workbook/load-workbook-from-filename"},next:{title:"Worksheet",permalink:"/xceed-libs-doc/workbooks/category/worksheet"}},i={},d=[];function l(o){const e={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,s.R)(),...o.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"load-workbook-with-stream",children:"Load Workbook with stream"})}),"\n",(0,t.jsx)(e.p,{children:"This example demonstrates how to load workbook with stream when using the API from the Xceed Workbooks for .NET."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'    public static void LoadWorkbookWithStream()\r\n    {\r\n      using( var fs = new FileStream( "AutoValue.xlsx", FileMode.Open, FileAccess.Read, FileShare.Read ) )\r\n      {\r\n        using( var workbook = Workbook.Load( fs ) )\r\n        {\r\n          // Get the first worksheet. A workbook contains at least 1 worksheet.\r\n          var worksheet = workbook.Worksheets[ 0 ];\r\n\r\n          // Add a title.\r\n          worksheet.Cells[ "B1" ].Value = "Load Workbook with stream";\r\n          worksheet.Cells[ "B1" ].Style.Font = new Font() { Bold = true, Size = 15.5d };\r\n\r\n          // Insert cell values into this workbook.\r\n          worksheet.Cells[ "C27" ].Value = "Manager:";\r\n          worksheet.Cells[ "D27" ].Value = "Mike Thompson";\r\n          // Set 27th row font.\r\n          worksheet.Rows[ 26 ].Style.Font.Bold = true;\r\n\r\n          // Save workbook to disk.\r\n          workbook.SaveAs( "LoadWorkbookWithStream.xlsx" );\r\n          Console.WriteLine( "\\tCreated: LoadWorkbookWithStream.xlsx\\n" );\r\n        }\r\n      }\r\n    }\n'})})]})}function c(o={}){const{wrapper:e}={...(0,s.R)(),...o.components};return e?(0,t.jsx)(e,{...o,children:(0,t.jsx)(l,{...o})}):l(o)}},28453:(o,e,r)=>{r.d(e,{R:()=>a,x:()=>k});var t=r(96540);const s={},n=t.createContext(s);function a(o){const e=t.useContext(n);return t.useMemo((function(){return"function"==typeof o?o(e):{...e,...o}}),[e,o])}function k(o){let e;return e=o.disableParentContext?"function"==typeof o.components?o.components(s):o.components||s:a(o.components),t.createElement(n.Provider,{value:e},o.children)}}}]);