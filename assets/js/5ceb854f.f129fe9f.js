"use strict";(self.webpackChunkxceed_libs_doc=self.webpackChunkxceed_libs_doc||[]).push([[5041],{71631:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>d,toc:()=>u});var t=r(74848),s=r(28453),i=r(11470),l=r(19365);const a={},o="How to display progress information",d={id:"code-snippets/working-with-ftpclient-interface/file03",title:"How to display progress information",description:"The FileTransferStatus, ReceivingFile and SendingFile events of the FtpClient class can all be used to display progress information during an FTP operation.",source:"@site/ftp/code-snippets/working-with-ftpclient-interface/file03.md",sourceDirName:"code-snippets/working-with-ftpclient-interface",slug:"/code-snippets/working-with-ftpclient-interface/file03",permalink:"/xceed-libs-doc/ftp/code-snippets/working-with-ftpclient-interface/file03",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebarftp",previous:{title:"How to continue a multiple-file transfer",permalink:"/xceed-libs-doc/ftp/code-snippets/working-with-ftpclient-interface/file02"},next:{title:"How to list the contents of an FTP folder",permalink:"/xceed-libs-doc/ftp/code-snippets/working-with-ftpclient-interface/file04"}},c={},u=[{value:"Demonstration",id:"demonstration",level:2},{value:"Things you should consider",id:"things-you-should-consider",level:2}];function f(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"how-to-display-progress-information",children:"How to display progress information"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"FileTransferStatus"}),", ",(0,t.jsx)(n.code,{children:"ReceivingFile"})," and ",(0,t.jsx)(n.code,{children:"SendingFile"})," events of the ",(0,t.jsx)(n.code,{children:"FtpClient"})," class can all be used to display progress information during an FTP operation."]}),"\n",(0,t.jsxs)(n.p,{children:["The FileTransferStatus event is raised for every packet sent or received during a file transfer, while the ",(0,t.jsx)(n.code,{children:"ReceivingFile"})," and ",(0,t.jsx)(n.code,{children:"SendingFile"})," events for each file being sent or received to and from the FTP server."]}),"\n",(0,t.jsxs)(n.p,{children:["Other events such as the ",(0,t.jsx)(n.code,{children:"StateChanged"}),", ",(0,t.jsx)(n.code,{children:"Disconnected"}),", ",(0,t.jsx)(n.code,{children:"CommandSent"})," and ",(0,t.jsx)(n.code,{children:"ReplyReceived"})," events can also be used to display information during an FTP operation."]}),"\n",(0,t.jsx)(n.h2,{id:"demonstration",children:"Demonstration"}),"\n",(0,t.jsxs)(n.p,{children:["The following example demonstrates how to use the ",(0,t.jsx)(n.code,{children:"FileTransferStatus"})," and ",(0,t.jsx)(n.code,{children:"SendingFile"})," events to display progressing information while uploading files to an FTP server. It will also demonstrates how to use the CommandSent and ReplyReceived events to provide logging information during the process"]}),"\n",(0,t.jsx)(n.p,{children:"This example assumes that you are in a Windows application and that the form contains 2 labels, 2 progress bars and a listbox."}),"\n",(0,t.jsxs)(i.A,{children:[(0,t.jsx)(l.A,{value:"csharp",label:"C#",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'  FtpClient ftp = new FtpClient();\r\n      \r\n  ftp.FileTransferStatus += new FileTransferStatusEventHandler( this.file_transfer );\r\n  ftp.SendingFile += new TransferringFileEventHandler( this.sending_file );\r\n  ftp.CommandSent += new CommandSentEventHandler( this.command_sent );           \r\n  ftp.ReplyReceived += new ReplyReceivedEventHandler( this.reply_received );\r\n  \r\n  ftp.Connect( "localhost" );\r\n  ftp.Login();\r\n              \r\n  ftp.SendMultipleFiles( @"C:\\Demos\\*", true, true );\r\n  \r\n  ftp.Disconnect();\r\n  \r\n  ftp.FileTransferStatus -= new FileTransferStatusEventHandler( this.file_transfer );\r\n  ftp.SendingFile -= new TransferringFileEventHandler( this.sending_file );\r\n  ftp.CommandSent -= new CommandSentEventHandler( this.command_sent );           \r\n  ftp.ReplyReceived -= new ReplyReceivedEventHandler( this.reply_received );\r\n  \r\n  private void file_transfer( object sender, FileTransferStatusEventArgs e )\r\n  {\r\n    if( e.BytesTransferred == 0 )\r\n    {\r\n      label2.Text = "Receiving file " + e.LocalFilename;\r\n      label1.Text = "Receiving file #" + e.FilesTransferred.ToString() + \r\n                    " of " + e.FilesTotal.ToString();\r\n      label1.Refresh();\r\n      label2.Refresh();\r\n    }\r\n              \r\n    progressBar2.Value = e.BytesPercent;      \r\n    progressBar1.Value = e.AllBytesPercent;      \r\n  }\r\n              \r\n  private void sending_file( object sender, TransferringFileEventArgs e )\r\n  {      \r\n    listBox1.Items.Add( "SENDING " + e.LocalFilename.ToUpper() + " TO " +\r\n                        e.RemoteFilename.ToUpper() );\r\n    listBox1.Refresh();      \r\n  }\r\n  \r\n  private void command_sent( object sender, CommandSentEventArgs e )\r\n  {\r\n    listBox1.Items.Add( ">> " + e.Command );\r\n    listBox1.SelectedItem = listBox1.Items.Count - 1;\r\n  }\r\n  \r\n  private void reply_received( object sender, ReplyReceivedEventArgs e )\r\n  {\r\n    foreach( string line in e.Reply.Lines )\r\n    {\r\n      listBox1.Items.Add( "<<" + line );\r\n    }\r\n  \r\n    listBox1.SelectedItem = listBox1.Items.Count - 1;\r\n  }\n'})})}),(0,t.jsx)(l.A,{value:"vb.net",label:"Visual Basic .NET",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-vb.NET",children:'  Dim ftp As New FtpClient()\r\n\r\n  AddHandler ftp.FileTransferStatus, AddressOf Me.file_transfer\r\n  AddHandler ftp.SendingFile, AddressOf Me.sending_file\r\n  AddHandler ftp.CommandSent, AddressOf Me.command_sent\r\n  AddHandler ftp.ReplyReceived, AddressOf Me.reply_received\r\n\r\n  ftp.Connect( "localhost" )\r\n  ftp.Login()\r\n\r\n  ftp.SendMultipleFiles( "C:\\Demos\\*", True, True )\r\n\r\n  ftp.Disconnect()\r\n\r\n  RemoveHandler ftp.FileTransferStatus, AddressOf Me.file_transfer\r\n  RemoveHandler ftp.SendingFile, AddressOf Me.sending_file\r\n  RemoveHandler ftp.CommandSent, AddressOf Me.command_sent\r\n  RemoveHandler ftp.ReplyReceived, AddressOf Me.reply_received\r\n\r\n  Private Sub file_transfer(ByVal sender As Object, ByVal e As FileTransferStatusEventArgs)\r\n\r\n    If e.BytesTransferred = 0 Then\r\n      label2.Text = "Receiving file " + e.LocalFilename\r\n      label1.Text = "Receiving file #" + e.FilesTransferred.ToString() + _\r\n                    " of " + e.FilesTotal.ToString()\r\n\r\n      label1.Refresh()\r\n      label2.Refresh()\r\n    End If\r\n\r\n    progressBar2.Value = e.BytesPercent\r\n    progressBar1.Value = e.AllBytesPercent\r\n  End Sub\r\n\r\n  Private Sub sending_file(ByVal sender As Object, ByVal e As TransferringFileEventArgs)\r\n\r\n    listBox1.Items.Add("SENDING " + e.LocalFilename.ToUpper() + _\r\n                      " TO " + e.RemoteFilename.ToUpper())\r\n    listBox1.Refresh()\r\n  End Sub\r\n\r\n  Private Sub command_sent(ByVal sender As Object, ByVal e As CommandSentEventArgs)\r\n\r\n    listBox1.Items.Add(">> " + e.Command)\r\n    listBox1.SelectedItem = listBox1.Items.Count - 1\r\n  End Sub\r\n\r\n  Private Sub reply_received(ByVal sender As Object, ByVal e As ReplyReceivedEventArgs)\r\n\r\n    Dim line As String\r\n    For Each line In e.Reply.Lines\r\n\r\n      listBox1.Items.Add("<<" + line)\r\n    Next line\r\n\r\n    listBox1.SelectedItem = listBox1.Items.Count - 1\r\n\r\n  End Sub\n'})})})]}),"\n",(0,t.jsx)(n.h2,{id:"things-you-should-consider",children:"Things you should consider"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Do you want to know the state of the FTP client? Check the Connected and Busy properties. You can also check the State property for specific state information. The ",(0,t.jsx)(n.code,{children:"StateChanged"})," event can also be used to know when the state of the FTP client changes."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Do you want to continue a multiple-file transfer (when using the ",(0,t.jsx)(n.code,{children:"ReceiveMultipleFiles"})," or ",(0,t.jsx)(n.code,{children:"SendingMultipleFiles"})," methods) when one or more of the files being transferred causes an error? Handle the ",(0,t.jsx)(n.code,{children:"MultipleFileTransferError"})," event."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Do you want to prevent routers from prematurely closing the command channel while a long data transfer is taking place. Set the ",(0,t.jsx)(n.code,{children:"KeepAliveInterval"})," property."]}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(f,{...e})}):f(e)}},19365:(e,n,r)=>{r.d(n,{A:()=>l});r(96540);var t=r(34164);const s={tabItem:"tabItem_Ymn6"};var i=r(74848);function l(e){let{children:n,hidden:r,className:l}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,t.A)(s.tabItem,l),hidden:r,children:n})}},11470:(e,n,r)=>{r.d(n,{A:()=>w});var t=r(96540),s=r(34164),i=r(23104),l=r(56347),a=r(205),o=r(57485),d=r(31682),c=r(70679);function u(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function f(e){const{values:n,children:r}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:r,attributes:t,default:s}}=e;return{value:n,label:r,attributes:t,default:s}}))}(r);return function(e){const n=(0,d.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,r])}function p(e){let{value:n,tabValues:r}=e;return r.some((e=>e.value===n))}function h(e){let{queryString:n=!1,groupId:r}=e;const s=(0,l.W6)(),i=function(e){let{queryString:n=!1,groupId:r}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:n,groupId:r});return[(0,o.aZ)(i),(0,t.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(s.location.search);n.set(i,e),s.replace({...s.location,search:n.toString()})}),[i,s])]}function m(e){const{defaultValue:n,queryString:r=!1,groupId:s}=e,i=f(e),[l,o]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=r.find((e=>e.default))??r[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:i}))),[d,u]=h({queryString:r,groupId:s}),[m,v]=function(e){let{groupId:n}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(n),[s,i]=(0,c.Dv)(r);return[s,(0,t.useCallback)((e=>{r&&i.set(e)}),[r,i])]}({groupId:s}),g=(()=>{const e=d??m;return p({value:e,tabValues:i})?e:null})();(0,a.A)((()=>{g&&o(g)}),[g]);return{selectedValue:l,selectValue:(0,t.useCallback)((e=>{if(!p({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),v(e)}),[u,v,i]),tabValues:i}}var v=r(92303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=r(74848);function x(e){let{className:n,block:r,selectedValue:t,selectValue:l,tabValues:a}=e;const o=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.a_)(),c=e=>{const n=e.currentTarget,r=o.indexOf(n),s=a[r].value;s!==t&&(d(n),l(s))},u=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const r=o.indexOf(e.currentTarget)+1;n=o[r]??o[0];break}case"ArrowLeft":{const r=o.indexOf(e.currentTarget)-1;n=o[r]??o[o.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":r},n),children:a.map((e=>{let{value:n,label:r,attributes:i}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>o.push(e),onKeyDown:u,onClick:c,...i,className:(0,s.A)("tabs__item",g.tabItem,i?.className,{"tabs__item--active":t===n}),children:r??n},n)}))})}function y(e){let{lazy:n,children:r,selectedValue:i}=e;const l=(Array.isArray(r)?r:[r]).filter(Boolean);if(n){const e=l.find((e=>e.props.value===i));return e?(0,t.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:l.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function T(e){const n=m(e);return(0,b.jsxs)("div",{className:(0,s.A)("tabs-container",g.tabList),children:[(0,b.jsx)(x,{...n,...e}),(0,b.jsx)(y,{...n,...e})]})}function w(e){const n=(0,v.A)();return(0,b.jsx)(T,{...e,children:u(e.children)},String(n))}},28453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>a});var t=r(96540);const s={},i=t.createContext(s);function l(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);