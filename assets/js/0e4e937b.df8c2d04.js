"use strict";(self.webpackChunkxceed_docs_words=self.webpackChunkxceed_docs_words||[]).push([[7408],{56631:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>u});var t=r(74848),o=r(28453),s=r(11470),i=r(19365);const a={},l="Using the FXP Protocol",c={id:"basic-concepts/ftp-capabilities/using-fxp-protocol",title:"Using the FXP Protocol",description:"FXP stands for the File eXchange Protocol. It is a method of transferring data that uses FTP to transfer files from one remote server to another server without routing the file data through the client's connection. As such, it is a server-to-server protocol.",source:"@site/ftp/basic-concepts/ftp-capabilities/using-fxp-protocol.md",sourceDirName:"basic-concepts/ftp-capabilities",slug:"/basic-concepts/ftp-capabilities/using-fxp-protocol",permalink:"/xceed-libs-doc/ftp/basic-concepts/ftp-capabilities/using-fxp-protocol",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebarftp",previous:{title:"How to copy items from an FTP server (download)",permalink:"/xceed-libs-doc/ftp/basic-concepts/ftp-capabilities/ftp-using-filesystem-interface/display-content-of-file"},next:{title:"Secure FTP (SSL/TLS)",permalink:"/xceed-libs-doc/ftp/basic-concepts/ftp-capabilities/secure-ftp"}},d={},u=[];function h(e){const n={admonition:"admonition",code:"code",em:"em",h1:"h1",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"using-the-fxp-protocol",children:"Using the FXP Protocol"})}),"\n",(0,t.jsx)(n.p,{children:"FXP stands for the File eXchange Protocol. It is a method of transferring data that uses FTP to transfer files from one remote server to another server without routing the file data through the client's connection. As such, it is a server-to-server protocol."}),"\n",(0,t.jsx)(n.p,{children:"While FXP is referred as a distinct protocol, it is, in fact, simply a clever usage of the standard FTP protocol. No special server set up is required."}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"Some FTP servers disallow FXP file transfers for security reasons. The FTP client has no way to detect this. If an FXP transfer is attempted on a server that does not allow it, an exception will be thrown."})}),"\n",(0,t.jsx)(n.p,{children:"In practice, making an FXP file transfers means that 2 FTP client objects are used. One for each FTP server. A file is selected on the first client, that client is connected to the source server. A destination path is selected on the second client, that client is connected to the destination server. The first client then initiates a FTP file transfer by asking the destination server to connect to the source server and retrieve the selected file."}),"\n",(0,t.jsx)(n.p,{children:"For a FXP transfer to work, one client needs to have its FxpPassiveTransfer property set to true. The other client's value for the property needs to be set to false. Also, both clients must use the same value for the RepresentationType and TransferMode properties."}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["Xceed Ftp for .NET only supports making FXP transfers on unencrypted data channels. This means that when connecting to both source and destination FTP servers, the ",(0,t.jsx)(n.em,{children:"dataProtection"})," parameter must be DataChannelProtection.Clear. It is, however, permitted for the control channel of either source of destination FTP client to be encrypted."]})}),"\n",(0,t.jsxs)(n.p,{children:["The FXP functionality is available through both the ",(0,t.jsx)(n.code,{children:"FtpClient"})," and the ",(0,t.jsx)(n.code,{children:"FileSystem"})," interfaces."]}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:"FXP file transfers using the FtpClient interface"}),(0,t.jsx)(n.p,{children:"FXP transfers are initiated with the static method FtpClient.FxpCopy(). Before the method is called, the context must be properly set up."}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Step by step instructions"})}),(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Because FtpClient.FxpCopy() is static, two independent FtpClient objects are needed. One client for the source file on the source server, another client for the destination file on the destination server."}),"\n"]}),(0,t.jsxs)(s.A,{children:[(0,t.jsx)(i.A,{value:"csharp",label:"C#",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"    // Create a FTP client to control our source server\r\n    FtpClient sourceClient = new FtpClient();\r\n\r\n    // Create a FTP client to control our destination server\r\n    FtpClient destinationClient = new FtpClient();\n"})})}),(0,t.jsx)(i.A,{value:"vb.net",label:"Visual Basic .NET",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-vb.NET",children:"    ' Create a FTP client to control our source server\r\n    Dim sourceClient As New FtpClient()\r\n\r\n    ' Create a FTP client to control our destination server\r\n    Dim destinationClient As New FtpClient()\n"})})})]}),(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:"Connect to each server using the needed credentials for each server."}),"\n"]}),(0,t.jsxs)(s.A,{children:[(0,t.jsx)(i.A,{value:"csharp",label:"C#",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'    // Connect to the source server\r\n    sourceClient.Connect( "localhost", 21 );\r\n    sourceClient.Login( "normal", "normal" );\r\n\r\n    // Connect to the destination server\r\n    destinationClient.Connect( "localhost", 23 );\r\n    destinationClient.Login( "normal", "normal" );\n'})})}),(0,t.jsx)(i.A,{value:"vb.net",label:"Visual Basic .NET",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-vb.NET",children:'    \' Connect to the source server\r\n    sourceClient.Connect("localhost", 21)\r\n    sourceClient.Login("normal", "normal")\r\n\r\n    \' Connect to the destination server\r\n    destinationClient.Connect("localhost", 23)\r\n    destinationClient.Login("normal", "normal")\n'})})})]}),(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsx)(n.li,{children:"Make sure the properties on each FtpClient are valid for FXP transfers."}),"\n"]}),(0,t.jsxs)(s.A,{children:[(0,t.jsx)(i.A,{value:"csharp",label:"C#",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"    /* For a FXP transfer, only one client can be setup for passive transfer.\r\n      The FxpServer enumeration allows to select either the source or destination client\r\n      as the one that will be setup as passive.\r\n      \r\n      A FxpServer value is supplied to FtpClient.FxpCopy() */\r\n    FxpServer passiveServer = FxpServer.Source;\r\n\r\n    /* For a FXP transfer, both clients must use the same representation type.\r\n    The default values suit us fine here. */\r\n    //sourceClient.RepresentationType = RepresentationType.Binary;\r\n    //destinationClient.RepresentationType = RepresentationType.Binary;\r\n\r\n    /* For a FXP transfer, both clients must use the same transfer mode.\r\n    The default values suit us fine here. */\r\n    //sourceClient.TransferMode = TransferMode.Stream;\r\n    //destinationClient.TransferMode = TransferMode.Stream;\n"})})}),(0,t.jsx)(i.A,{value:"vb.net",label:"Visual Basic .NET",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-vb.NET",children:"    '         For a FXP transfer, only one client can be setup for passive transfer.\r\n    '           The FxpServer enumeration allows to select either the source or destination client\r\n    '           as the one that will be setup as passive.\r\n    '          \r\n    '           A FxpServer value is supplied to FtpClient.FxpCopy() \r\n            Dim passiveServer As FxpServer = FxpServer.Source\r\n\r\n    '         For a FXP transfer, both clients must use the same representation type.\r\n    '         The default values suit us fine here. \r\n            'sourceClient.RepresentationType = RepresentationType.Binary;\r\n            'destinationClient.RepresentationType = RepresentationType.Binary;\r\n\r\n    '         For a FXP transfer, both clients must use the same transfer mode.\r\n    '         The default values suit us fine here. \r\n            'sourceClient.TransferMode = TransferMode.Stream;\r\n            'destinationClient.TransferMode = TransferMode.Stream;\n"})})})]}),(0,t.jsxs)(n.ol,{start:"4",children:["\n",(0,t.jsx)(n.li,{children:"Select source and destination files and call FtpClient.FxpCopy()."}),"\n"]}),(0,t.jsxs)(s.A,{children:[(0,t.jsx)(i.A,{value:"csharp",label:"C#",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'    // Change the current folder on the source server to get to the file we want\r\n    sourceClient.ChangeCurrentFolder( "normal1" );\r\n\r\n    // Copy a file from the source server\'s current folder to the destination server giving the file a specific name\r\n    FtpClient.FxpCopy( sourceClient, "tvDebug.log", destinationClient, "FxpCopy.xml", passiveServer );\n'})})}),(0,t.jsx)(i.A,{value:"vb.net",label:"Visual Basic .NET",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-vb.NET",children:'    \' Change the current folder on the source server to get to the file we want\r\n    sourceClient.ChangeCurrentFolder("normal1")\r\n\r\n    \' Copy a file from the source server\'s current folder to the destination server giving the file a specific name\r\n    FtpClient.FxpCopy(sourceClient, "tvDebug.log", destinationClient, "FxpCopy.xml", passiveServer)\n'})})})]}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Putting it all together"})}),(0,t.jsxs)(s.A,{children:[(0,t.jsx)(i.A,{value:"csharp",label:"C#",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'    // Create a FTP client to control our source server\r\n    FtpClient sourceClient = new FtpClient();\r\n\r\n    // Create a FTP client to control our destination server\r\n    FtpClient destinationClient = new FtpClient();\r\n\r\n    try\r\n    {\r\n      // Connect to the source server\r\n      sourceClient.Connect( "localhost", 21 );\r\n\r\n      /* FXP transfers cannot be performed over encrypted data channels. While it is ok\r\n      to encrypt the control channel, the data channel must remain clear. The DataChannelProtection.Clear\r\n      value ensures that. */\r\n      //sourceClient.Authenticate( AuthenticationMethod.Tls, VerificationFlags.None, null, DataChannelProtection.Clear );\r\n      \r\n      // Login to the source server\r\n      sourceClient.Login( "normal", "normal" );\r\n\r\n      // Connect to the destination server\r\n      destinationClient.CertificateReceived += delegate( object sender, CertificateReceivedEventArgs e )\r\n      {\r\n        e.Action = VerificationAction.Accept;\r\n      };\r\n\r\n      destinationClient.Connect( "localhost", 10021 );\r\n\r\n      /* FXP transfers cannot be performed over encrypted data channels. While it is ok\r\n      to encrypt the control channel, the data channel must remain clear. The DataChannelProtection.Clear\r\n      value ensures that. */\r\n      //destinationClient.Authenticate( AuthenticationMethod.Ssl, VerificationFlags.None, null, DataChannelProtection.Clear );\r\n      \r\n      // Login to the destination server\r\n      destinationClient.Login( "normal", "normal" );\r\n\r\n      /* For a FXP transfer, only one client can be setup for passive transfer.\r\n        The FxpServer enumeration allows to select either the source or destination client\r\n        as the one that will be setup as passive.\r\n        \r\n        A FxpServer value is supplied to FtpClient.FxpCopy() */\r\n      FxpServer passiveServer = FxpServer.Source;\r\n\r\n      // Change the current folder on the source server to get to the file we want\r\n      sourceClient.ChangeCurrentFolder( "normal1" );\r\n\r\n      // Copy a file from the source server\'s current folder to the destination server giving the file a specific name\r\n      FtpClient.FxpCopy( sourceClient, "tvDebug.log", destinationClient, "FxpCopy.xml", passiveServer );\r\n\r\n      // Copy a file from a specific path on the source server to the destination server using the same name\r\n      FtpClient.FxpCopy( sourceClient, "/SftpFolder5/Folder2/ntprint.inf", destinationClient, "ntprint.inf", passiveServer );\r\n\r\n      // Copy a file from a specific path on the source server to a specific folder relative to the current folder on the destination server\r\n      FtpClient.FxpCopy( sourceClient, "/SftpFolder5/Folder2/ntprint.inf", destinationClient, "Folder2/ntprint.inf", passiveServer );\r\n    }\r\n    finally\r\n    {\r\n      if( sourceClient.Connected )\r\n        sourceClient.Disconnect();\r\n\r\n      if( destinationClient.Connected )\r\n        destinationClient.Disconnect();\r\n    }\n'})})}),(0,t.jsx)(i.A,{value:"vb.net",label:"Visual Basic .NET",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-vb.NET",children:'    \' Create a FTP client to control our source server\r\n    Dim sourceClient As New FtpClient()\r\n\r\n    \' Create a FTP client to control our destination server\r\n    Dim destinationClient As New FtpClient()\r\n\r\n    Try\r\n      \' Connect to the source server\r\n      sourceClient.Connect("localhost", 21)\r\n\r\n\'         FXP transfers cannot be performed over encrypted data channels. While it is ok\r\n\'         to encrypt the control channel, the data channel must remain clear. The DataChannelProtection.Clear\r\n\'         value ensures that. \r\n      \'sourceClient.Authenticate( AuthenticationMethod.Tls, VerificationFlags.None, null, DataChannelProtection.Clear );\r\n\r\n      \' Login to the source server\r\n      sourceClient.Login("normal", "normal")\r\n\r\n      \' Connect to the destination server\r\n      AddHandler destinationClient.CertificateReceived, AddressOf AnonymousMethod1\r\n\r\n      destinationClient.Connect("localhost", 10021)\r\n\r\n\'         FXP transfers cannot be performed over encrypted data channels. While it is ok\r\n\'         to encrypt the control channel, the data channel must remain clear. The DataChannelProtection.Clear\r\n\'         value ensures that. \r\n      \'destinationClient.Authenticate( AuthenticationMethod.Ssl, VerificationFlags.None, null, DataChannelProtection.Clear );\r\n\r\n      \' Login to the destination server\r\n      destinationClient.Login("normal", "normal")\r\n\r\n\'         For a FXP transfer, only one client can be setup for passive transfer.\r\n\'           The FxpServer enumeration allows to select either the source or destination client\r\n\'           as the one that will be setup as passive.\r\n\'          \r\n\'           A FxpServer value is supplied to FtpClient.FxpCopy() \r\n      Dim passiveServer As FxpServer = FxpServer.Source\r\n\r\n      \' Change the current folder on the source server to get to the file we want\r\n      sourceClient.ChangeCurrentFolder("normal1")\r\n\r\n      \' Copy a file from the source server\'s current folder to the destination server giving the file a specific name\r\n      FtpClient.FxpCopy(sourceClient, "tvDebug.log", destinationClient, "FxpCopy.xml", passiveServer)\r\n\r\n      \' Copy a file from a specific path on the source server to the destination server using the same name\r\n      FtpClient.FxpCopy(sourceClient, "/SftpFolder5/Folder2/ntprint.inf", destinationClient, "ntprint.inf", passiveServer)\r\n\r\n      \' Copy a file from a specific path on the source server to a specific folder relative to the current folder on the destination server\r\n      FtpClient.FxpCopy(sourceClient, "/SftpFolder5/Folder2/ntprint.inf", destinationClient, "Folder2/ntprint.inf", passiveServer)\r\n    Finally\r\n      If sourceClient.Connected Then\r\n        sourceClient.Disconnect()\r\n      End If\r\n\r\n      If destinationClient.Connected Then\r\n        destinationClient.Disconnect()\r\n      End If\r\n    End Try\n'})})})]})]}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:"FXP file transfers using the FileSystem interface"}),(0,t.jsx)(n.p,{children:"With the FileSystem interface, FXP transfers are initiated automatically when the context of a call to Copy() meets the requirements for a FXP transfer. Because of this, FXP transfers are disabled by default so that behavior from previous versions is preserved and that you retain control over when FXP transfers are made."}),(0,t.jsx)(n.p,{children:"If the context of a transfer doesn't meet requirements or FXP transfers are disabled, a standard FTP transfer is performed. No error message or event is triggered by the decision. The process is automatic."}),(0,t.jsxs)(n.p,{children:["FXP transfer permissions are controlled by values of the ",(0,t.jsx)(n.code,{children:"FxpTransferPolicy Enumeration"})," in the ",(0,t.jsx)(n.code,{children:"FtpConnection.FxpTransferPolicy"})," Property. Then the context for the transfer is set up and the transfer is initiated with a normal call to ",(0,t.jsx)(n.code,{children:"CopyTo()"}),"."]}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Step by step instructions"})}),(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Two independent FtpConnection objects are needed. One connection for the source file on the source server, another connection for the destination file on the destination server."}),"\n"]}),(0,t.jsxs)(s.A,{children:[(0,t.jsx)(i.A,{value:"csharp",label:"C#",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'    // Connect to the source server\r\n    FtpConnection sourceClient = new FtpConnection( "localhost", 21, "normal", "normal" );\r\n\r\n    // Connect to the destination server\r\n    FtpConnection destinationClient = new FtpConnection( "localhost", 23, "normal", "normal" );\n'})})}),(0,t.jsx)(i.A,{value:"vb.net",label:"Visual Basic .NET",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-vb.NET",children:'    \' Connect to the source server\r\n    Dim sourceClient As New FtpConnection("localhost", 21, "normal", "normal")\r\n\r\n    \' Connect to the destination server\r\n    Dim destinationClient As New FtpConnection("localhost", 23, "normal", "normal")\n'})})})]}),(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:"Make sure FXP is enabled on each FtpConnection and that the properties are valid for FXP transfers."}),"\n"]}),(0,t.jsxs)(s.A,{children:[(0,t.jsx)(i.A,{value:"csharp",label:"C#",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"    /* By default, the FXP transfer policy is to not allow any FXP transfers. */\r\n\r\n    // Enable FXP uploads on the source client\r\n    sourceClient.FxpTransferPolicy = FxpTransferPolicy.AcceptOutgoingTransfers;\r\n\r\n    // Enable FXP downloads on the destination client\r\n    destinationClient.FxpTransferPolicy = FxpTransferPolicy.AcceptIncomingTransfers;\r\n\r\n    /* For a FXP transfer, only one client can have the FxpPassiveTransfer property set to true.\r\n      The default value for the property is true. So we need to set the property to false\r\n      on one of the two clients. */\r\n    destinationClient.FxpPassiveTransfer = false;\r\n\r\n    /* For a FXP transfer, both clients must use the same transfer mode.\r\n    The default values suit us fine here. */\r\n    //sourceClient.TransferMode = TransferMode.Stream;\r\n    //destinationClient.TransferMode = TransferMode.Stream;\n"})})}),(0,t.jsx)(i.A,{value:"vb.net",label:"Visual Basic .NET",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-vb.NET",children:"        ' By default, the FXP transfer policy is to not allow any FXP transfers. \r\n\r\n        ' Enable FXP uploads on the source client\r\n        sourceClient.FxpTransferPolicy = FxpTransferPolicy.AcceptOutgoingTransfers\r\n\r\n        ' Enable FXP downloads on the destination client\r\n        destinationClient.FxpTransferPolicy = FxpTransferPolicy.AcceptIncomingTransfers\r\n\r\n  '       For a FXP transfer, only one client can have the FxpPassiveTransfer property set to true.\r\n  '        The default value for the property is true. So we need to set the property to false\r\n  '        on one of the two clients. \r\n        destinationClient.FxpPassiveTransfer = False\r\n\r\n  '       For a FXP transfer, both clients must use the same transfer mode.\r\n  '       The default values suit us fine here. \r\n        'sourceClient.TransferMode = TransferMode.Stream;\r\n        'destinationClient.TransferMode = TransferMode.Stream;\n"})})})]}),(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsx)(n.li,{children:"Select source and destination files and call CopyTo()."}),"\n"]}),(0,t.jsxs)(s.A,{children:[(0,t.jsx)(i.A,{value:"csharp",label:"C#",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'    AbstractFolder sourceFolder;\r\n    AbstractFile sourceFile, destinationFile;\r\n\r\n    // Copy a file from the source server to the destination server giving the file a specific name\r\n    sourceFolder = new FtpFolder( sourceClient, "normal1" );\r\n    sourceFile = sourceFolder.GetFile( "tvDebug.log" );\r\n    destinationFile = new FtpFile( destinationClient, "FxpCopy.xml" );\r\n\r\n    /* There is no special method to perform FXP transfers. CopyTo() examines the context\r\n      of the transfer. If it involves FTP files at both source and destination on two different\r\n      servers, the FXP transfer policy and other parameters are valid for FXP, it will be\r\n      initiated. If not, a standard file transfer will be made. */\r\n\r\n    sourceFile.CopyTo( destinationFile, true );\n'})})}),(0,t.jsx)(i.A,{value:"vb.net",label:"Visual Basic .NET",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-vb.NET",children:'        Dim sourceFolder As AbstractFolder\r\n        Dim sourceFile, destinationFile As AbstractFile\r\n\r\n        \' Copy a file from the source server to the destination server giving the file a specific name\r\n        sourceFolder = New FtpFolder(sourceClient, "normal1")\r\n        sourceFile = sourceFolder.GetFile("tvDebug.log")\r\n        destinationFile = New FtpFile(destinationClient, "FxpCopy.xml")\r\n\r\n  \'       There is no special method to perform FXP transfers. CopyTo() examines the context\r\n  \'        of the transfer. If it involves FTP files at both source and destination on two different\r\n  \'        servers, the FXP transfer policy and other parameters are valid for FXP, it will be\r\n  \'        initiated. If not, a standard file transfer will be made. \r\n\r\n        sourceFile.CopyTo(destinationFile, True)\n'})})})]}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Putting it all together"})}),(0,t.jsxs)(s.A,{children:[(0,t.jsx)(i.A,{value:"csharp",label:"C#",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'    // Connect to the source server\r\n    using( FtpConnection sourceClient = new FtpConnection( "localhost", 21, "normal", "normal" ) )\r\n    {\r\n      sourceClient.TraceWriter = new StreamWriter( @"sourceClient.log", false );\r\n\r\n      // Connect to the destination server\r\n      using( FtpConnection destinationClient = new FtpConnection( "localhost", 23, "normal", "normal" ) )\r\n      {\r\n        /* For a FXP transfer, only one client can have the FxpPassiveTransfer property set to true.\r\n        The default value for the property is true. So we need to set the property to false\r\n        on one of the two clients. */\r\n        destinationClient.FxpPassiveTransfer = false;\r\n\r\n        /* By default, the FXP transfer policy is to not allow any FXP transfers. */\r\n\r\n        // Enable FXP uploads on the source client\r\n        sourceClient.FxpTransferPolicy = FxpTransferPolicy.AcceptOutgoingTransfers;\r\n\r\n        // Enable FXP downloads on the destination client\r\n        destinationClient.FxpTransferPolicy = FxpTransferPolicy.AcceptIncomingTransfers;\r\n\r\n        AbstractFolder sourceFolder, destinationFolder;\r\n        AbstractFile sourceFile, destinationFile;\r\n\r\n        // Copy a file from the source server to the destination server giving the file a specific name\r\n        sourceFolder = new FtpFolder( sourceClient, "normal1" );\r\n        sourceFile = sourceFolder.GetFile( "tvDebug.log" );\r\n        destinationFile = new FtpFile( destinationClient, "FxpCopy.xml" );\r\n        \r\n        /* There is no special method to perform FXP transfers. CopyTo() examines the context\r\n        of the transfer. If it involves FTP files at both source and destination on two different\r\n        servers, the FXP transfer policy and other parameters are valid for FXP, it will be\r\n        initiated. If not, a standard file transfer will be made. */\r\n        \r\n        sourceFile.CopyTo( destinationFile, true );\r\n\r\n        // Copy a file from a specific path on the source server to the destination server using the same name\r\n        sourceFile = new FtpFile( sourceClient, @"\\SftpFolder5\\Folder2\\ntprint.inf" );\r\n        destinationFolder = new FtpFolder( destinationClient );\r\n        sourceFile.CopyTo( destinationFolder, true );\r\n\r\n        // Copy a file from a specific path on the source server to a specific folder relative to the home folder on the destination server\r\n        sourceFile = new FtpFile( sourceClient, @"\\SftpFolder5\\Folder2\\ntprint.inf" );\r\n        destinationFolder = new FtpFolder( destinationClient, "Folder2" );\r\n        sourceFile.CopyTo( destinationFolder, true );\r\n      }\r\n    }\n'})})}),(0,t.jsx)(i.A,{value:"vb.net",label:"Visual Basic .NET",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-vb.NET",children:'        \' Connect to the source server\r\n        Using sourceClient As New FtpConnection("localhost", 21, "normal", "normal")\r\n          sourceClient.TraceWriter = New StreamWriter("sourceClient.log", False)\r\n\r\n          \' Connect to the destination server\r\n          Using destinationClient As New FtpConnection("localhost", 23, "normal", "normal")\r\n  \'           For a FXP transfer, only one client can have the FxpPassiveTransfer property set to true.\r\n  \'           The default value for the property is true. So we need to set the property to false\r\n  \'           on one of the two clients. \r\n            destinationClient.FxpPassiveTransfer = False\r\n\r\n            \' By default, the FXP transfer policy is to not allow any FXP transfers. \r\n\r\n            \' Enable FXP uploads on the source client\r\n            sourceClient.FxpTransferPolicy = FxpTransferPolicy.AcceptOutgoingTransfers\r\n\r\n            \' Enable FXP downloads on the destination client\r\n            destinationClient.FxpTransferPolicy = FxpTransferPolicy.AcceptIncomingTransfers\r\n\r\n            Dim sourceFolder, destinationFolder As AbstractFolder\r\n            Dim sourceFile, destinationFile As AbstractFile\r\n\r\n            \' Copy a file from the source server to the destination server giving the file a specific name\r\n            sourceFolder = New FtpFolder(sourceClient, "normal1")\r\n            sourceFile = sourceFolder.GetFile("tvDebug.log")\r\n            destinationFile = New FtpFile(destinationClient, "FxpCopy.xml")\r\n\r\n  \'           There is no special method to perform FXP transfers. CopyTo() examines the context\r\n  \'           of the transfer. If it involves FTP files at both source and destination on two different\r\n  \'           servers, the FXP transfer policy and other parameters are valid for FXP, it will be\r\n  \'           initiated. If not, a standard file transfer will be made. \r\n\r\n            sourceFile.CopyTo(destinationFile, True)\r\n\r\n            \' Copy a file from a specific path on the source server to the destination server using the same name\r\n            sourceFile = New FtpFile(sourceClient, "\\SftpFolder5\\Folder2\\ntprint.inf")\r\n            destinationFolder = New FtpFolder(destinationClient)\r\n            sourceFile.CopyTo(destinationFolder, True)\r\n\r\n            \' Copy a file from a specific path on the source server to a specific folder relative to the home folder on the destination server\r\n            sourceFile = New FtpFile(sourceClient, "\\SftpFolder5\\Folder2\\ntprint.inf")\r\n            destinationFolder = New FtpFolder(destinationClient, "Folder2")\r\n            sourceFile.CopyTo(destinationFolder, True)\r\n          End Using\r\n        End Using\n'})})})]})]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},19365:(e,n,r)=>{r.d(n,{A:()=>i});r(96540);var t=r(34164);const o={tabItem:"tabItem_Ymn6"};var s=r(74848);function i(e){let{children:n,hidden:r,className:i}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,t.A)(o.tabItem,i),hidden:r,children:n})}},11470:(e,n,r)=>{r.d(n,{A:()=>y});var t=r(96540),o=r(34164),s=r(23104),i=r(56347),a=r(205),l=r(57485),c=r(31682),d=r(70679);function u(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:r}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:r,attributes:t,default:o}}=e;return{value:n,label:r,attributes:t,default:o}}))}(r);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,r])}function p(e){let{value:n,tabValues:r}=e;return r.some((e=>e.value===n))}function f(e){let{queryString:n=!1,groupId:r}=e;const o=(0,i.W6)(),s=function(e){let{queryString:n=!1,groupId:r}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:n,groupId:r});return[(0,l.aZ)(s),(0,t.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(o.location.search);n.set(s,e),o.replace({...o.location,search:n.toString()})}),[s,o])]}function F(e){const{defaultValue:n,queryString:r=!1,groupId:o}=e,s=h(e),[i,l]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=r.find((e=>e.default))??r[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:s}))),[c,u]=f({queryString:r,groupId:o}),[F,v]=function(e){let{groupId:n}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(n),[o,s]=(0,d.Dv)(r);return[o,(0,t.useCallback)((e=>{r&&s.set(e)}),[r,s])]}({groupId:o}),C=(()=>{const e=c??F;return p({value:e,tabValues:s})?e:null})();(0,a.A)((()=>{C&&l(C)}),[C]);return{selectedValue:i,selectValue:(0,t.useCallback)((e=>{if(!p({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),v(e)}),[u,v,s]),tabValues:s}}var v=r(92303);const C={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var m=r(74848);function x(e){let{className:n,block:r,selectedValue:t,selectValue:i,tabValues:a}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.a_)(),d=e=>{const n=e.currentTarget,r=l.indexOf(n),o=a[r].value;o!==t&&(c(n),i(o))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const r=l.indexOf(e.currentTarget)+1;n=l[r]??l[0];break}case"ArrowLeft":{const r=l.indexOf(e.currentTarget)-1;n=l[r]??l[l.length-1];break}}n?.focus()};return(0,m.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":r},n),children:a.map((e=>{let{value:n,label:r,attributes:s}=e;return(0,m.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>l.push(e),onKeyDown:u,onClick:d,...s,className:(0,o.A)("tabs__item",C.tabItem,s?.className,{"tabs__item--active":t===n}),children:r??n},n)}))})}function b(e){let{lazy:n,children:r,selectedValue:s}=e;const i=(Array.isArray(r)?r:[r]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===s));return e?(0,t.cloneElement)(e,{className:(0,o.A)("margin-top--md",e.props.className)}):null}return(0,m.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function g(e){const n=F(e);return(0,m.jsxs)("div",{className:(0,o.A)("tabs-container",C.tabList),children:[(0,m.jsx)(x,{...n,...e}),(0,m.jsx)(b,{...n,...e})]})}function y(e){const n=(0,v.A)();return(0,m.jsx)(g,{...e,children:u(e.children)},String(n))}},28453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>a});var t=r(96540);const o={},s=t.createContext(o);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);