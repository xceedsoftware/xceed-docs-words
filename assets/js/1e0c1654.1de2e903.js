"use strict";(self.webpackChunkxceed_libs_doc=self.webpackChunkxceed_libs_doc||[]).push([[9872],{45759:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>c,toc:()=>h});var n=i(74848),a=i(28453),r=i(11470),l=i(19365);const s={},o="Extract multi-file GZip archive to a single file",c={id:"basic-concepts/tar-gzip-capabilities/gzip/extract-multifile-gzip-to-file",title:"Extract multi-file GZip archive to a single file",description:"The following example demonstrates how to decompress a GZip archive that contains multiple segments that need to be concatenated into a single uncompressed destination file.",source:"@site/zip/basic-concepts/tar-gzip-capabilities/gzip/extract-multifile-gzip-to-file.md",sourceDirName:"basic-concepts/tar-gzip-capabilities/gzip",slug:"/basic-concepts/tar-gzip-capabilities/gzip/extract-multifile-gzip-to-file",permalink:"/xceed-libs-doc/zip/basic-concepts/tar-gzip-capabilities/gzip/extract-multifile-gzip-to-file",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebarzip",previous:{title:"Multi-file operations",permalink:"/xceed-libs-doc/zip/basic-concepts/tar-gzip-capabilities/gzip/performing-multifile-gzip"},next:{title:"Xceed Tar",permalink:"/xceed-libs-doc/zip/basic-concepts/tar-gzip-capabilities/tar/overview"}},u={},h=[{value:"Steps",id:"steps",level:2},{value:"Demonstration",id:"demonstration",level:2},{value:"Things you should consider",id:"things-you-should-consider",level:2}];function d(e){const t={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"extract-multi-file-gzip-archive-to-a-single-file",children:"Extract multi-file GZip archive to a single file"})}),"\n",(0,n.jsx)(t.p,{children:"The following example demonstrates how to decompress a GZip archive that contains multiple segments that need to be concatenated into a single uncompressed destination file."}),"\n",(0,n.jsx)(t.p,{children:'Typically, GZip is used to compress a single "stream". However, the file format allows for multiple streams to be archived in a single GZip file. These multiple streams can refer to different files but, the streams are often just segments of a single file that are meant to be concatenated into a single uncompressed file.'}),"\n",(0,n.jsx)(t.p,{children:"The GZip file format contains no field or flag that clearly indicates how the multiple streams are to be handled. Typically, they are meant to be concatenated into a single destination."}),"\n",(0,n.jsx)(t.p,{children:"The default behavior of GZipArchive is to process the first file only and stop. This is because most GZip archives only contain one file. However, it is possible to make GZipArchive process all the segments in an archive and concatenate them into the destination file."}),"\n",(0,n.jsx)(t.p,{children:"To enable the feature, the static property GZipArchive.AllowMultipleFiles must be set to 'true'. Then, the GZipArchive.CopyFilesTo() method is used, it takes a AbstractFile object as the destination instead of an AbstractFolder, meaning that the method will extract and concatenate all the files in the archive to the destination file."}),"\n",(0,n.jsx)(t.admonition,{type:"note",children:(0,n.jsx)(t.p,{children:"FileSystem-based GZip is not currently available in Xceed's .NET Compact Framework products."})}),"\n",(0,n.jsx)(t.h2,{id:"steps",children:"Steps"}),"\n",(0,n.jsx)(t.p,{children:"To extract items from a GZip archive to a single destination file, the following steps must be performed:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:["Retrieve a reference to a GZip archive using the ",(0,n.jsx)(t.code,{children:"GZipArchive"})," class."]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:["Set the ",(0,n.jsx)(t.code,{children:"GZipArchive.AllowMultipleFiles"})," to 'true'."]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:["Retrieve a reference to a file where the files will be extracted to using an ",(0,n.jsx)(t.code,{children:"AbstractFile-derived"})," class such as ",(0,n.jsx)(t.code,{children:"DiskFile"}),", ",(0,n.jsx)(t.code,{children:"MemoryFile"}),", ",(0,n.jsx)(t.code,{children:"FtpFile"}),", etc."]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:["Call the ",(0,n.jsx)(t.code,{children:"CopyFilesTo"})," method to copy the GZipped files to the destination file."]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"demonstration",children:"Demonstration"}),"\n",(0,n.jsxs)(r.A,{children:[(0,n.jsx)(l.A,{value:"csharp",label:"C#",default:!0,children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",children:'  static void Example()\r\n  {\r\n    // Select a GZip file\r\n    AbstractFile gzipFile = new DiskFile( "MyFile.dat.gz" );\r\n\r\n    // Select a destination file\r\n    AbstractFile destinationFile = new DiskFile( "MyFile.dat" );\r\n\r\n    /* By default, the component only sees or processes the first item it sees in the\r\n    * archive. If our GZip file contains multiple segments making up a single file,\r\n    * we need for the component "see" them. The AllowMultipleFiles property allows for that.\r\n    * The segments will be seen as \'files\' but that doesn\'t matter, we will use a special\r\n    * implementation of CopyFilesTo() that extracts all the segments into a single\r\n    * destination file. */\r\n\r\n    // Allow the archive to see multiple files\r\n    GZipArchive.AllowMultipleFiles = true;\r\n\r\n    // Setup a logical GZip archive around the GZip file\r\n    GZipArchive gzip = new GZipArchive( gzipFile );\r\n\r\n    /* We need to extract all the segments of the archive into a single destination file.\r\n    * GZipArchive contains a special flavor of CopyFilesTo() that takes an AbstractFile\r\n    * as the destination. All the items in the archive will be extracted into the file,\r\n    * one after the other. */\r\n\r\n    // Extract all the segments from the archive to the destination file\r\n    gzip.CopyFilesTo( destinationFile, true );\r\n  }\n'})})}),(0,n.jsx)(l.A,{value:"vb.net",label:"Visual Basic .NET",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-vb.NET",children:"  Private Shared Sub Example()\r\n  ' Select a GZip file\r\n  Dim gzipFile As AbstractFile = New DiskFile(\"MyFile.dat.gz\")\r\n\r\n  ' Select a destination file\r\n  Dim destinationFile As AbstractFile = New DiskFile(\"MyFile.dat\")\r\n\r\n'       By default, the component only sees or processes the first item it sees in the\r\n'       * archive. If our GZip file contains multiple segments making up a single file,\r\n'       * we need for the component \"see\" them. The AllowMultipleFiles property allows for that.\r\n'       * The segments will be seen as 'files' but that doesn't matter, we will use a special\r\n'       * implementation of CopyFilesTo() that extracts all the segments into a single\r\n'       * destination file. \r\n\r\n  ' Allow the archive to see multiple files\r\n  GZipArchive.AllowMultipleFiles = True\r\n\r\n  ' Setup a logical GZip archive around the GZip file\r\n  Dim gzip As New GZipArchive(gzipFile)\r\n\r\n'       We need to extract all the segments of the archive into a single destination file.\r\n'       * GZipArchive contains a special flavor of CopyFilesTo() that takes an AbstractFile\r\n'       * as the destination. All the items in the archive will be extracted into the file,\r\n'       * one after the other. \r\n\r\n  ' Extract all the segments from the archive to the destination file\r\n  gzip.CopyFilesTo(destinationFile, True)\r\nEnd Sub\n"})})})]}),"\n",(0,n.jsx)(t.h2,{id:"things-you-should-consider",children:"Things you should consider"}),"\n",(0,n.jsx)(t.p,{children:"The main questions you should ask yourself when extracting items from a GZip archive are:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Do you want to move items rather than copy them? Use the ",(0,n.jsx)(t.code,{children:"MoveTo"})," method."]}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},19365:(e,t,i)=>{i.d(t,{A:()=>l});i(96540);var n=i(34164);const a={tabItem:"tabItem_Ymn6"};var r=i(74848);function l(e){let{children:t,hidden:i,className:l}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,n.A)(a.tabItem,l),hidden:i,children:t})}},11470:(e,t,i)=>{i.d(t,{A:()=>j});var n=i(96540),a=i(34164),r=i(23104),l=i(56347),s=i(205),o=i(57485),c=i(31682),u=i(70679);function h(e){return n.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(e){const{values:t,children:i}=e;return(0,n.useMemo)((()=>{const e=t??function(e){return h(e).map((e=>{let{props:{value:t,label:i,attributes:n,default:a}}=e;return{value:t,label:i,attributes:n,default:a}}))}(i);return function(e){const t=(0,c.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,i])}function p(e){let{value:t,tabValues:i}=e;return i.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:i}=e;const a=(0,l.W6)(),r=function(e){let{queryString:t=!1,groupId:i}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!i)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return i??null}({queryString:t,groupId:i});return[(0,o.aZ)(r),(0,n.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(a.location.search);t.set(r,e),a.replace({...a.location,search:t.toString()})}),[r,a])]}function m(e){const{defaultValue:t,queryString:i=!1,groupId:a}=e,r=d(e),[l,o]=(0,n.useState)((()=>function(e){let{defaultValue:t,tabValues:i}=e;if(0===i.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:i}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${i.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=i.find((e=>e.default))??i[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:r}))),[c,h]=f({queryString:i,groupId:a}),[m,b]=function(e){let{groupId:t}=e;const i=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,r]=(0,u.Dv)(i);return[a,(0,n.useCallback)((e=>{i&&r.set(e)}),[i,r])]}({groupId:a}),g=(()=>{const e=c??m;return p({value:e,tabValues:r})?e:null})();(0,s.A)((()=>{g&&o(g)}),[g]);return{selectedValue:l,selectValue:(0,n.useCallback)((e=>{if(!p({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);o(e),h(e),b(e)}),[h,b,r]),tabValues:r}}var b=i(92303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=i(74848);function x(e){let{className:t,block:i,selectedValue:n,selectValue:l,tabValues:s}=e;const o=[],{blockElementScrollPositionUntilNextRender:c}=(0,r.a_)(),u=e=>{const t=e.currentTarget,i=o.indexOf(t),a=s[i].value;a!==n&&(c(t),l(a))},h=e=>{let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const i=o.indexOf(e.currentTarget)+1;t=o[i]??o[0];break}case"ArrowLeft":{const i=o.indexOf(e.currentTarget)-1;t=o[i]??o[o.length-1];break}}t?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":i},t),children:s.map((e=>{let{value:t,label:i,attributes:r}=e;return(0,v.jsx)("li",{role:"tab",tabIndex:n===t?0:-1,"aria-selected":n===t,ref:e=>o.push(e),onKeyDown:h,onClick:u,...r,className:(0,a.A)("tabs__item",g.tabItem,r?.className,{"tabs__item--active":n===t}),children:i??t},t)}))})}function y(e){let{lazy:t,children:i,selectedValue:r}=e;const l=(Array.isArray(i)?i:[i]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===r));return e?(0,n.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:l.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==r})))})}function w(e){const t=m(e);return(0,v.jsxs)("div",{className:(0,a.A)("tabs-container",g.tabList),children:[(0,v.jsx)(x,{...t,...e}),(0,v.jsx)(y,{...t,...e})]})}function j(e){const t=(0,b.A)();return(0,v.jsx)(w,{...e,children:h(e.children)},String(t))}},28453:(e,t,i)=>{i.d(t,{R:()=>l,x:()=>s});var n=i(96540);const a={},r=n.createContext(a);function l(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);