"use strict";(self.webpackChunkxceed_docs_words=self.webpackChunkxceed_docs_words||[]).push([[6161],{36902:(e,o,s)=>{s.r(o),s.d(o,{assets:()=>i,contentTitle:()=>c,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=s(74848),t=s(28453);const r={},c="Customize columns",l={id:"code-snippets/column/customize-columns",title:"Customize columns",description:"This example demonstrates how to customize columns when using the API from the Xceed Workbooks for .NET.",source:"@site/workbooks/code-snippets/column/customize-columns.md",sourceDirName:"code-snippets/column",slug:"/code-snippets/column/customize-columns",permalink:"/xceed-libs-doc/workbooks/code-snippets/column/customize-columns",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebarsworkbooks",previous:{title:"Column cell access",permalink:"/xceed-libs-doc/workbooks/code-snippets/column/column-cell-access"},next:{title:"Hide & unhide columns",permalink:"/xceed-libs-doc/workbooks/code-snippets/column/hide-unhide-columns"}},i={},u=[];function d(e){const o={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(o.header,{children:(0,n.jsx)(o.h1,{id:"customize-columns",children:"Customize columns"})}),"\n",(0,n.jsx)(o.p,{children:"This example demonstrates how to customize columns when using the API from the Xceed Workbooks for .NET."}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-csharp",children:'    public static void CustomizeColumns()\r\n    {\r\n      using( var workbook = Workbook.Create( "CustomizeColumns.xlsx" ) )\r\n      {\r\n        // Get the first worksheet. A workbook contains at least 1 worksheet.\r\n        var worksheet = workbook.Worksheets[ 0 ];\r\n\r\n        // Add a title.\r\n        worksheet.Cells[ "B1" ].Value = "Customize Columns";\r\n        worksheet.Cells[ "B1" ].Style.Font = new Font() { Bold = true, Size = 15.5d };\r\n\r\n        // Fill Cells and width of columns.  \r\n        worksheet.Cells[ "C5" ].Value = "This column has a width of 45";\r\n        worksheet.Columns[ 2 ].Width = 45d;\r\n\r\n        worksheet.Cells[ "D6" ].Value = "This column has an autoFit.";\r\n        worksheet.Columns[ "D" ].AutoFit();\r\n\r\n        worksheet.Columns[ 5 ].Cells[ 8 ].Value = "This column has a width of 30";\r\n        worksheet.Columns[ 5 ].Width = 30d;\r\n\r\n        // Save workbook to disk.\r\n        workbook.Save();\r\n        Console.WriteLine( "\\tCreated: CustomizeColumns.xlsx\\n" );\r\n      }\r\n    }\n'})})]})}function m(e={}){const{wrapper:o}={...(0,t.R)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},28453:(e,o,s)=>{s.d(o,{R:()=>c,x:()=>l});var n=s(96540);const t={},r=n.createContext(t);function c(e){const o=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function l(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),n.createElement(r.Provider,{value:o},e.children)}}}]);