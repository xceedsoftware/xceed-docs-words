"use strict";(self.webpackChunkxceed_docs_words=self.webpackChunkxceed_docs_words||[]).push([[5511],{9718:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>c,toc:()=>a});var o=n(74848),r=n(28453);const l={},s="Unlock specific cells",c={id:"code-snippets/protection/unlock-specific-cell",title:"Unlock specific cells",description:"This example demonstrates how to unlock specific cells when using the API from the Xceed Workbooks for .NET.",source:"@site/workbooks/code-snippets/protection/unlock-specific-cell.md",sourceDirName:"code-snippets/protection",slug:"/code-snippets/protection/unlock-specific-cell",permalink:"/xceed-libs-doc/workbooks/code-snippets/protection/unlock-specific-cell",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebarsworkbooks",previous:{title:"Lock specific cells",permalink:"/xceed-libs-doc/workbooks/code-snippets/protection/lock-specific-cell"},next:{title:"Row",permalink:"/xceed-libs-doc/workbooks/category/row"}},i={},a=[];function k(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"unlock-specific-cells",children:"Unlock specific cells"})}),"\n",(0,o.jsx)(t.p,{children:"This example demonstrates how to unlock specific cells when using the API from the Xceed Workbooks for .NET."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-csharp",children:'    public static void UnlockSpecificCells()\r\n    {\r\n      using( var workbook = Workbook.Create( "UnlockSpecificCells.xlsx" ) )\r\n      {\r\n        // Get the first worksheet. A workbook contains at least 1 worksheet.\r\n        var worksheet = workbook.Worksheets[ 0 ];\r\n\r\n        // Add a title.\r\n        worksheet.Cells[ "B1" ].Value = "Unlock Specific Cells";\r\n        worksheet.Cells[ "B1" ].Style.Font = new Font() { Bold = true, Size = 15.5d };\r\n\r\n        // Set content.\r\n        worksheet.Cells[ "B4" ].Value = "Only Light Green cells are unlocked.";\r\n        worksheet.Cells[ "B4" ].Style.Font.Bold = true;\r\n\r\n        worksheet.Cells[ "C6" ].Value = "Date";\r\n        worksheet.Cells[ "D6" ].Value = "Employee";\r\n        worksheet.Cells[ "E6" ].Value = "In Time";\r\n        worksheet.Cells[ "F6" ].Value = "Out Time";\r\n\r\n        worksheet.Cells[ "C7" ].Value = new DateTime( 2022, 5, 1 );\r\n        worksheet.Cells[ "D7" ].Value = "Micheal Smith";\r\n        worksheet.Cells[ "E7" ].Value = new TimeSpan( 8, 0, 0 );\r\n        worksheet.Cells[ "F7" ].Value = new TimeSpan( 15, 30, 0 );\r\n        worksheet.Cells[ "D8" ].Value = "Stella Corleone";\r\n        worksheet.Cells[ "E8" ].Value = new TimeSpan( 9, 15, 0 );\r\n        worksheet.Cells[ "F8" ].Value = new TimeSpan(  16, 30, 0 );\r\n\r\n        worksheet.Cells[ "C10" ].Value = new DateTime( 2022, 5, 2 );\r\n        worksheet.Cells[ "D10" ].Value = "Carl Debrusk";        \r\n        worksheet.Cells[ "E10" ].Value = new TimeSpan( 8, 15, 0 );\r\n        worksheet.Cells[ "F10" ].Value = new TimeSpan( 13, 45, 0 );\r\n        worksheet.Cells[ "D11" ].Value = "Stella Corleone";\r\n        worksheet.Cells[ "E11" ].Value = new TimeSpan( 8, 45, 0 );\r\n        worksheet.Cells[ "F11" ].Value = new TimeSpan( 12, 30, 0 );\r\n        worksheet.Cells[ "D12" ].Value = "Michael Smith";\r\n\r\n        // AutoFit columns from rowId 6 until the end for width between 0 and 255. RowId starts at 0.\r\n        worksheet.Columns.AutoFit( 0, 255, 6 );\r\n        // Format cells in column "E" and "F" to display times.\r\n        worksheet.Columns[ "E", "F" ].Style.CustomFormat = "hh:mm";\r\n        // Horitonaly align content in columns "C" through "F".\r\n        worksheet.Columns[ "C", "F" ].Style.Alignment.Horizontal = HorizontalAlignment.Center;\r\n        // Put the data in a formatted table.\r\n        var table = worksheet.Tables.Add( "C6", "F12", TableStyle.TableStyleLight14 );\r\n        table.AutoFilter.ShowFilterButton = false;\r\n\r\n        // All cells have their "locked" property set to true by default and will be activated when the worksheet will be protected.\r\n        // Unlock cells from "E7" to "F12" and set a LightGreen background.\r\n        worksheet.Cells[ "E7", "F12" ].Style.Protection.Locked = false;\r\n        worksheet.Cells[ "E7", "F12" ].Style.Fill.BackgroundColor = System.Drawing.Color.LightGreen;\r\n\r\n        // Protect the worksheet.\r\n        worksheet.Protect();\r\n\r\n        workbook.Save();\r\n        Console.WriteLine( "\\tCreated: UnlockSpecificCells.xlsx\\n" );\r\n      }\r\n    }\r\n\n'})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(k,{...e})}):k(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>c});var o=n(96540);const r={},l=o.createContext(r);function s(e){const t=o.useContext(l);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(l.Provider,{value:t},e.children)}}}]);