"use strict";(self.webpackChunkxceed_libs_doc=self.webpackChunkxceed_libs_doc||[]).push([[9030],{37838:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>u,toc:()=>c});var r=n(74848),a=n(28453),s=n(11470),i=n(19365);const o={},l="Performing a manual upload",u={id:"code-snippets/sftp-capabilities/file02",title:"Performing a manual upload",description:"The upload mechanism in SFtp is provided by the SFtpFile.CopyTo method. The method",source:"@site/ftp/code-snippets/sftp-capabilities/file02.md",sourceDirName:"code-snippets/sftp-capabilities",slug:"/code-snippets/sftp-capabilities/file02",permalink:"/xceed-libs-doc/ftp/code-snippets/sftp-capabilities/file02",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebarftp",previous:{title:"Connecting to an SFTP server",permalink:"/xceed-libs-doc/ftp/code-snippets/sftp-capabilities/file01"},next:{title:"Handling File Sharing Issues",permalink:"/xceed-libs-doc/ftp/code-snippets/sftp-capabilities/file03"}},d={},c=[];function p(e){const t={code:"code",h1:"h1",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"performing-a-manual-upload",children:"Performing a manual upload"})}),"\n",(0,r.jsx)(t.p,{children:"The upload mechanism in SFtp is provided by the SFtpFile.CopyTo method. The method"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Validates the supplied parameters by checking for null for example."}),"\n",(0,r.jsx)(t.li,{children:"Makes sure the upload makes sense by making sure the source exists, isn't the same as the destination, and other checks."}),"\n",(0,r.jsx)(t.li,{children:"Performs the upload by copying the data from the source to the destination."}),"\n",(0,r.jsx)(t.li,{children:"Applies the properties like dates, file attributes from the source file to the destination file."}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"In some scenarios, not all of these steps are desirable. For example, some SFtp servers remove files as soon as they are uploaded. This can cause problems with the last step of the upload procedure as the destination file might have disappeared before the properties can be applied."}),"\n",(0,r.jsx)(t.p,{children:"In these cases, it might be best to avoid using the CopyTo method and perform uploads manually. This allows an application to focus on the data upload only and avoid operations the server cannot handle."}),"\n",(0,r.jsx)(t.p,{children:"A manual upload is performed by opening streams for both the source and destination files and copying data read from the source stream to the destination stream in a loop until there is no more data to read. The amount of data read from the source in each iteration can be carefully chosen with the ComputeStreamBufferSize Method to generate the least overhead."}),"\n",(0,r.jsx)(t.p,{children:"The following example shows how this can be done."}),"\n",(0,r.jsxs)(s.A,{children:[(0,r.jsx)(i.A,{value:"csharp",label:"C#",default:!0,children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:'    using System;\r\n    using System.IO;\r\n\r\n    using Xceed.SSH.Client;\r\n    using Xceed.SSH.Protocols;\r\n    using Xceed.SSH.Core;\r\n    using Xceed.FileSystem;\r\n\r\n    namespace DocumentationExamples.SSH\r\n    {\r\n      public class ManualCopyTo\r\n      {\r\n        public static void Example()\r\n        {\r\n          string host = "sftptest.dreamhosters.com";\r\n          string username = "snippet_sftp";\r\n          string password = "9MNfGgSx";\r\n\r\n          using( SSHClient ssh = new SSHClient() )\r\n          {\r\n            ssh.Connect( host );\r\n            ssh.Authenticate( username, password );\r\n\r\n            // Start a SFtp session from the SSH client\r\n            using( SFtpSession sftp = new SFtpSession( ssh ) )\r\n            {\r\n              // Select a local file\r\n              AbstractFile sourceFile = new DiskFile( @"SomeFile.dat" );\r\n\r\n              // Select a remote destination folder\r\n              AbstractFolder destinationFolder = new SFtpFolder( sftp, "SomeFolder" );\r\n\r\n              // Select the destination file in the destination folder using the name of the source file\r\n              AbstractFile destinationFile = destinationFolder.GetFile( sourceFile.Name );\r\n\r\n              if( !sourceFile.Exists )\r\n                throw new InvalidOperationException( "Source file does not exist." );\r\n\r\n              if( sourceFile.IsSameAs( destinationFile ) )\r\n                throw new InvalidOperationException( "Cannot copy a file unto itself." );\r\n\r\n              // Open the source file for reading\r\n              using( Stream sourceStream = sourceFile.OpenRead() )\r\n              {\r\n                Stream destinationStream = null;\r\n\r\n                try\r\n                {\r\n                  // If the destination file already exists\r\n                  if( destinationFile.Exists )\r\n                  {\r\n                    // Open it for writing, overwriting its previous contents\r\n                    destinationStream = destinationFile.OpenWrite( true );\r\n                  }\r\n                  else\r\n                  {\r\n                    // Create it and open it for writing in one operation\r\n                    destinationStream = destinationFile.CreateWrite();\r\n                  }\r\n\r\n                  /* SSH has an overhead and several rules that define a maximum logical packet\r\n                  size.\r\n                  \r\n                  We are free to use any reasonable buffer size we want and it will work.\r\n                  However, using a value too small will generate more overhead than needed.\r\n                  Using a value too large will force the component to split the data into\r\n                  several packets and increase overhead as well.\r\n                    \r\n                  SFtpSession has a method that computes the optimal buffer size for the\r\n                  SFtp stream. It takes into account the effective overhead packets will have\r\n                  and computes a value that will make it so that every call to Stream.Write()\r\n                  will end up creating the biggest SSH packet allowed by the server that does\r\n                  not generate extra overhead.\r\n                    \r\n                  This provides the best throughput in a file transfer. */\r\n                  int bufferSize = sftp.ComputeStreamBufferSize( destinationStream );\r\n\r\n                  // Create a buffer for the streams\r\n                  byte[] buffer = new byte[ bufferSize ];\r\n                  int read;\r\n\r\n                  // While we have data to read from the source stream\r\n                  while( ( read = sourceStream.Read( buffer, 0, bufferSize ) ) > 0 )\r\n                  {\r\n                    // Write the data to the destination stream\r\n                    destinationStream.Write( buffer, 0, read );\r\n                  }\r\n                }\r\n                finally\r\n                {\r\n                  // If we have a destination stream\r\n                    if( destinationStream != null )\r\n                  {\r\n                    // Close it\r\n                    destinationStream.Close();\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\n'})})}),(0,r.jsx)(i.A,{value:"vb.net",label:"Visual Basic .NET",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-vb.NET",children:"  Imports Microsoft.VisualBasic\r\n  Imports System\r\n  Imports System.IO\r\n\r\n  Imports Xceed.SSH.Client\r\n  Imports Xceed.SSH.Protocols\r\n  Imports Xceed.SSH.Core\r\n  Imports Xceed.FileSystem\r\n\r\n  Namespace DocumentationExamples.SSH\r\n    Public Class ManualCopyTo\r\n      Public Shared Sub Example()\r\n        Dim host As String = \"sftptest.dreamhosters.com\"\r\n        Dim username As String = \"snippet_sftp\"\r\n        Dim password As String = \"9MNfGgSx\"\r\n\r\n        Using ssh As New SSHClient()\r\n          ssh.Connect(host)\r\n          ssh.Authenticate(username, password)\r\n\r\n          ' Start a SFtp session from the SSH client\r\n          Using sftp As New SFtpSession(ssh)\r\n            ' Select a local file\r\n            Dim sourceFile As AbstractFile = New DiskFile(\"SomeFile.dat\")\r\n\r\n            ' Select a remote destination folder\r\n            Dim destinationFolder As AbstractFolder = New SFtpFolder(sftp, \"SomeFolder\")\r\n\r\n            ' Select the destination file in the destination folder using the name of the source file\r\n            Dim destinationFile As AbstractFile = destinationFolder.GetFile(sourceFile.Name)\r\n\r\n            If (Not sourceFile.Exists) Then\r\n              Throw New InvalidOperationException(\"Source file does not exist.\")\r\n            End If\r\n\r\n            If sourceFile.IsSameAs(destinationFile) Then\r\n              Throw New InvalidOperationException(\"Cannot copy a file unto itself.\")\r\n            End If\r\n\r\n            ' Open the source file for reading\r\n            Using sourceStream As Stream = sourceFile.OpenRead()\r\n              Dim destinationStream As Stream = Nothing\r\n\r\n              Try\r\n                ' If the destination file already exists\r\n                If destinationFile.Exists Then\r\n                  ' Open it for writing, overwriting its previous contents\r\n                  destinationStream = destinationFile.OpenWrite(True)\r\n                Else\r\n                  ' Create it and open it for writing in one operation\r\n                  destinationStream = destinationFile.CreateWrite()\r\n                End If\r\n\r\n  '               SSH has an overhead and several rules that define a maximum logical packet\r\n  '               size.\r\n  '               \r\n  '               We are free to use any reasonable buffer size we want and it will work.\r\n  '               However, using a value too small will generate more overhead than needed.\r\n  '               Using a value too large will force the component to split the data into\r\n  '               several packets and increase overhead as well.\r\n  '                \r\n  '               SFtpSession has a method that computes the optimal buffer size for the\r\n  '               SFtp stream. It takes into account the effective overhead packets will have\r\n  '               and computes a value that will make it so that every call to Stream.Write()\r\n  '               will end up creating the biggest SSH packet allowed by the server that does\r\n  '               not generate extra overhead.\r\n  '                \r\n  '               This provides the best throughput in a file transfer. \r\n                Dim bufferSize As Integer = sftp.ComputeStreamBufferSize(destinationStream)\r\n\r\n                ' Create a buffer for the streams\r\n                Dim buffer(bufferSize - 1) As Byte\r\n                Dim read As Integer\r\n\r\n                ' While we have data to read from the source stream\r\n                read = sourceStream.Read(buffer, 0, bufferSize)\r\n                Do While read > 0\r\n                  ' Write the data to the destination stream\r\n                  destinationStream.Write(buffer, 0, read)\r\n                  read = sourceStream.Read(buffer, 0, bufferSize)\r\n                Loop\r\n              Finally\r\n                ' If we have a destination stream\r\n                If destinationStream IsNot Nothing Then\r\n                  ' Close it\r\n                  destinationStream.Close()\r\n                End If\r\n              End Try\r\n            End Using\r\n          End Using\r\n        End Using\r\n      End Sub\r\n    End Class\r\n  End Namespace\n"})})})]})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},19365:(e,t,n)=>{n.d(t,{A:()=>i});n(96540);var r=n(34164);const a={tabItem:"tabItem_Ymn6"};var s=n(74848);function i(e){let{children:t,hidden:n,className:i}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,r.A)(a.tabItem,i),hidden:n,children:t})}},11470:(e,t,n)=>{n.d(t,{A:()=>y});var r=n(96540),a=n(34164),s=n(23104),i=n(56347),o=n(205),l=n(57485),u=n(31682),d=n(70679);function c(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??function(e){return c(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}(n);return function(e){const t=(0,u.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function h(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const a=(0,i.W6)(),s=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l.aZ)(s),(0,r.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(a.location.search);t.set(s,e),a.replace({...a.location,search:t.toString()})}),[s,a])]}function m(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,s=p(e),[i,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!h({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:s}))),[u,c]=f({queryString:n,groupId:a}),[m,b]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,s]=(0,d.Dv)(n);return[a,(0,r.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:a}),S=(()=>{const e=u??m;return h({value:e,tabValues:s})?e:null})();(0,o.A)((()=>{S&&l(S)}),[S]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!h({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),c(e),b(e)}),[c,b,s]),tabValues:s}}var b=n(92303);const S={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=n(74848);function v(e){let{className:t,block:n,selectedValue:r,selectValue:i,tabValues:o}=e;const l=[],{blockElementScrollPositionUntilNextRender:u}=(0,s.a_)(),d=e=>{const t=e.currentTarget,n=l.indexOf(t),a=o[n].value;a!==r&&(u(t),i(a))},c=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;t=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;t=l[n]??l[l.length-1];break}}t?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":n},t),children:o.map((e=>{let{value:t,label:n,attributes:s}=e;return(0,g.jsx)("li",{role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,ref:e=>l.push(e),onKeyDown:c,onClick:d,...s,className:(0,a.A)("tabs__item",S.tabItem,s?.className,{"tabs__item--active":r===t}),children:n??t},t)}))})}function w(e){let{lazy:t,children:n,selectedValue:s}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===s));return e?(0,r.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:i.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==s})))})}function x(e){const t=m(e);return(0,g.jsxs)("div",{className:(0,a.A)("tabs-container",S.tabList),children:[(0,g.jsx)(v,{...t,...e}),(0,g.jsx)(w,{...t,...e})]})}function y(e){const t=(0,b.A)();return(0,g.jsx)(x,{...e,children:c(e.children)},String(t))}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var r=n(96540);const a={},s=r.createContext(a);function i(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);